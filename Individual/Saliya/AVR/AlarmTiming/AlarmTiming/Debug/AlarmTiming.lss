
AlarmTiming.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000cc  00800100  00001a5a  00001aee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  008001cc  008001cc  00001bba  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001bba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00001c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002bfe  00000000  00000000  00001d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aea  00000000  00000000  00004966  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d30  00000000  00000000  00005450  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f0  00000000  00000000  00006180  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008bc  00000000  00000000  00006570  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cae  00000000  00000000  00006e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00008ada  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
       4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
      68:	34 0a       	sbc	r3, r20

0000006a <__ctors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	ea e5       	ldi	r30, 0x5A	; 90
      7e:	fa e1       	ldi	r31, 0x1A	; 26
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	ac 3c       	cpi	r26, 0xCC	; 204
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	21 e0       	ldi	r18, 0x01	; 1
      8e:	ac ec       	ldi	r26, 0xCC	; 204
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	ad 3c       	cpi	r26, 0xCD	; 205
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	c5 e3       	ldi	r28, 0x35	; 53
      a0:	d0 e0       	ldi	r29, 0x00	; 0
      a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
      a4:	21 97       	sbiw	r28, 0x01	; 1
      a6:	fe 01       	movw	r30, r28
      a8:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__tablejump2__>
      ac:	c4 33       	cpi	r28, 0x34	; 52
      ae:	d1 07       	cpc	r29, r17
      b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
      b2:	0e 94 7e 04 	call	0x8fc	; 0x8fc <main>
      b6:	0c 94 2b 0d 	jmp	0x1a56	; 0x1a56 <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_ZN3RTCC1Ei>:
int pos[5][2] = {{4, 0},{1, 0}, {1, 1}, {4, 1}, {7, 1}};
char daysOfweek[][7] = {"SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"};



RTC::RTC(int b)
      be:	08 95       	ret

000000c0 <_ZN3RTC8i2c_initEv>:
	c = c/3;
}

void RTC::i2c_init()
{
    TWBR = 0xFF;
      c0:	8f ef       	ldi	r24, 0xFF	; 255
      c2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
      c6:	08 95       	ret

000000c8 <_ZN3RTC9i2c_startEv>:
}

void RTC::i2c_start()
{
    TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
      c8:	84 ea       	ldi	r24, 0xA4	; 164
      ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & (1<<TWINT)) == 0);
      ce:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      d2:	88 23       	and	r24, r24
      d4:	e4 f7       	brge	.-8      	; 0xce <_ZN3RTC9i2c_startEv+0x6>
}
      d6:	08 95       	ret

000000d8 <_ZN3RTC8i2c_stopEv>:

void RTC::i2c_stop()
{
    TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
      d8:	84 e9       	ldi	r24, 0x94	; 148
      da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      de:	08 95       	ret

000000e0 <_ZN3RTC9i2c_writeEh>:
}

void RTC::i2c_write(unsigned char data)
{
    TWDR = data;
      e0:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = (1<<TWINT)|(1<<TWEN);
      e4:	84 e8       	ldi	r24, 0x84	; 132
      e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & (1<<TWINT)) == 0);
      ea:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      ee:	88 23       	and	r24, r24
      f0:	e4 f7       	brge	.-8      	; 0xea <_ZN3RTC9i2c_writeEh+0xa>
}
      f2:	08 95       	ret

000000f4 <_ZN3RTC8i2c_readEv>:
unsigned char RTC::i2c_read()
{
    TWCR = (1 << TWINT) | (1 << TWEN)| (1 << TWEA);
      f4:	84 ec       	ldi	r24, 0xC4	; 196
      f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & (1 << TWINT)) == 0);
      fa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      fe:	88 23       	and	r24, r24
     100:	e4 f7       	brge	.-8      	; 0xfa <_ZN3RTC8i2c_readEv+0x6>
    return TWDR;
     102:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}
     106:	08 95       	ret

00000108 <_ZN3RTC12i2c_lastreadEv>:

unsigned char RTC::i2c_lastread()
{
	TWCR = (1 << TWINT) | (1 << TWEN);
     108:	84 e8       	ldi	r24, 0x84	; 132
     10a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while ((TWCR & (1 << TWINT)) == 0);
     10e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     112:	88 23       	and	r24, r24
     114:	e4 f7       	brge	.-8      	; 0x10e <_ZN3RTC12i2c_lastreadEv+0x6>
	return TWDR;
     116:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	
}
     11a:	08 95       	ret

0000011c <_ZN3RTC8binTobcdEh>:

unsigned char RTC::binTobcd(unsigned char data)
{
   
	
	return( (data/10*16) + (data%10) );
     11c:	9d ec       	ldi	r25, 0xCD	; 205
     11e:	69 9f       	mul	r22, r25
     120:	91 2d       	mov	r25, r1
     122:	11 24       	eor	r1, r1
     124:	96 95       	lsr	r25
     126:	96 95       	lsr	r25
     128:	96 95       	lsr	r25
     12a:	29 2f       	mov	r18, r25
     12c:	22 0f       	add	r18, r18
     12e:	82 2f       	mov	r24, r18
     130:	88 0f       	add	r24, r24
     132:	88 0f       	add	r24, r24
     134:	82 0f       	add	r24, r18
     136:	68 1b       	sub	r22, r24
     138:	86 2f       	mov	r24, r22
}
     13a:	20 e1       	ldi	r18, 0x10	; 16
     13c:	92 9f       	mul	r25, r18
     13e:	80 0d       	add	r24, r0
     140:	11 24       	eor	r1, r1
     142:	08 95       	ret

00000144 <_ZN3RTC8bcdTobinEh>:

unsigned char RTC::bcdTobin(unsigned char data)
{
  
    return( (data/16*10) + (data%16) );
     144:	86 2f       	mov	r24, r22
     146:	82 95       	swap	r24
     148:	8f 70       	andi	r24, 0x0F	; 15
     14a:	88 0f       	add	r24, r24
     14c:	98 2f       	mov	r25, r24
     14e:	99 0f       	add	r25, r25
     150:	99 0f       	add	r25, r25
     152:	89 0f       	add	r24, r25
     154:	6f 70       	andi	r22, 0x0F	; 15
}
     156:	86 0f       	add	r24, r22
     158:	08 95       	ret

0000015a <_ZN3RTC10clock_initEv>:


void RTC::clock_init()
{
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
     15e:	ec 01       	movw	r28, r24
    i2c_start();
     160:	0e 94 64 00 	call	0xc8	; 0xc8 <_ZN3RTC9i2c_startEv>
    i2c_write(RTC_WADDR);
     164:	60 ed       	ldi	r22, 0xD0	; 208
     166:	ce 01       	movw	r24, r28
     168:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>
	i2c_write(0x0E);
     16c:	6e e0       	ldi	r22, 0x0E	; 14
     16e:	ce 01       	movw	r24, r28
     170:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>
	i2c_write(0x20);
     174:	60 e2       	ldi	r22, 0x20	; 32
     176:	ce 01       	movw	r24, r28
     178:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>
	i2c_write(0x08);
     17c:	68 e0       	ldi	r22, 0x08	; 8
     17e:	ce 01       	movw	r24, r28
     180:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>
    i2c_stop();
     184:	ce 01       	movw	r24, r28
     186:	0e 94 6c 00 	call	0xd8	; 0xd8 <_ZN3RTC8i2c_stopEv>
	
}
     18a:	df 91       	pop	r29
     18c:	cf 91       	pop	r28
     18e:	08 95       	ret

00000190 <_ZN3RTC7setTimeEiiiiiii>:

void RTC::setTime(int sec, int min, int hour,int day, int mon,int wday, int year)
{
     190:	af 92       	push	r10
     192:	cf 92       	push	r12
     194:	df 92       	push	r13
     196:	ef 92       	push	r14
     198:	ff 92       	push	r15
     19a:	0f 93       	push	r16
     19c:	1f 93       	push	r17
     19e:	cf 93       	push	r28
     1a0:	df 93       	push	r29
     1a2:	ec 01       	movw	r28, r24
     1a4:	d6 2e       	mov	r13, r22
     1a6:	f4 2e       	mov	r15, r20
     1a8:	12 2f       	mov	r17, r18
    i2c_start();
     1aa:	0e 94 64 00 	call	0xc8	; 0xc8 <_ZN3RTC9i2c_startEv>
    i2c_write(RTC_WADDR);
     1ae:	60 ed       	ldi	r22, 0xD0	; 208
     1b0:	ce 01       	movw	r24, r28
     1b2:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>
    i2c_write(0x00);
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	ce 01       	movw	r24, r28
     1ba:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>
    i2c_write(binTobcd(sec));
     1be:	6d 2d       	mov	r22, r13
     1c0:	ce 01       	movw	r24, r28
     1c2:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN3RTC8binTobcdEh>
     1c6:	68 2f       	mov	r22, r24
     1c8:	ce 01       	movw	r24, r28
     1ca:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>
    i2c_write(binTobcd(min));
     1ce:	6f 2d       	mov	r22, r15
     1d0:	ce 01       	movw	r24, r28
     1d2:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN3RTC8binTobcdEh>
     1d6:	68 2f       	mov	r22, r24
     1d8:	ce 01       	movw	r24, r28
     1da:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>
    i2c_write(binTobcd(hour));
     1de:	61 2f       	mov	r22, r17
     1e0:	ce 01       	movw	r24, r28
     1e2:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN3RTC8binTobcdEh>
     1e6:	68 2f       	mov	r22, r24
     1e8:	ce 01       	movw	r24, r28
     1ea:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>

	i2c_write(binTobcd(wday));
     1ee:	6c 2d       	mov	r22, r12
     1f0:	ce 01       	movw	r24, r28
     1f2:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN3RTC8binTobcdEh>
     1f6:	68 2f       	mov	r22, r24
     1f8:	ce 01       	movw	r24, r28
     1fa:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>
	i2c_write(binTobcd(day));
     1fe:	60 2f       	mov	r22, r16
     200:	ce 01       	movw	r24, r28
     202:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN3RTC8binTobcdEh>
     206:	68 2f       	mov	r22, r24
     208:	ce 01       	movw	r24, r28
     20a:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>
	i2c_write(binTobcd(mon));
     20e:	6e 2d       	mov	r22, r14
     210:	ce 01       	movw	r24, r28
     212:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN3RTC8binTobcdEh>
     216:	68 2f       	mov	r22, r24
     218:	ce 01       	movw	r24, r28
     21a:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>
	i2c_write(binTobcd(year));
     21e:	6a 2d       	mov	r22, r10
     220:	ce 01       	movw	r24, r28
     222:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN3RTC8binTobcdEh>
     226:	68 2f       	mov	r22, r24
     228:	ce 01       	movw	r24, r28
     22a:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>
	i2c_stop();
     22e:	ce 01       	movw	r24, r28
     230:	0e 94 6c 00 	call	0xd8	; 0xd8 <_ZN3RTC8i2c_stopEv>
}
     234:	df 91       	pop	r29
     236:	cf 91       	pop	r28
     238:	1f 91       	pop	r17
     23a:	0f 91       	pop	r16
     23c:	ff 90       	pop	r15
     23e:	ef 90       	pop	r14
     240:	df 90       	pop	r13
     242:	cf 90       	pop	r12
     244:	af 90       	pop	r10
     246:	08 95       	ret

00000248 <_ZN3RTC8ReadTimeEPiS0_S0_S0_S0_S0_S0_>:

void RTC::ReadTime(int *sec, int *min, int *hour, int *day, int *wday, int *month, int *year)
{
     248:	4f 92       	push	r4
     24a:	5f 92       	push	r5
     24c:	6f 92       	push	r6
     24e:	7f 92       	push	r7
     250:	8f 92       	push	r8
     252:	9f 92       	push	r9
     254:	af 92       	push	r10
     256:	bf 92       	push	r11
     258:	cf 92       	push	r12
     25a:	df 92       	push	r13
     25c:	ef 92       	push	r14
     25e:	ff 92       	push	r15
     260:	0f 93       	push	r16
     262:	1f 93       	push	r17
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	ec 01       	movw	r28, r24
     26a:	4b 01       	movw	r8, r22
     26c:	3a 01       	movw	r6, r20
     26e:	29 01       	movw	r4, r18
    i2c_start();
     270:	0e 94 64 00 	call	0xc8	; 0xc8 <_ZN3RTC9i2c_startEv>
    i2c_write(RTC_WADDR);
     274:	60 ed       	ldi	r22, 0xD0	; 208
     276:	ce 01       	movw	r24, r28
     278:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>
    i2c_write(0x00);
     27c:	60 e0       	ldi	r22, 0x00	; 0
     27e:	ce 01       	movw	r24, r28
     280:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>
    i2c_stop();
     284:	ce 01       	movw	r24, r28
     286:	0e 94 6c 00 	call	0xd8	; 0xd8 <_ZN3RTC8i2c_stopEv>
	
    i2c_start();
     28a:	ce 01       	movw	r24, r28
     28c:	0e 94 64 00 	call	0xc8	; 0xc8 <_ZN3RTC9i2c_startEv>
    i2c_write(RTC_RADDR);
     290:	61 ed       	ldi	r22, 0xD1	; 209
     292:	ce 01       	movw	r24, r28
     294:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3RTC9i2c_writeEh>
    *sec = bcdTobin(i2c_read());
     298:	ce 01       	movw	r24, r28
     29a:	0e 94 7a 00 	call	0xf4	; 0xf4 <_ZN3RTC8i2c_readEv>
     29e:	68 2f       	mov	r22, r24
     2a0:	ce 01       	movw	r24, r28
     2a2:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN3RTC8bcdTobinEh>
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	f4 01       	movw	r30, r8
     2aa:	91 83       	std	Z+1, r25	; 0x01
     2ac:	80 83       	st	Z, r24
    *min = bcdTobin(i2c_read());
     2ae:	ce 01       	movw	r24, r28
     2b0:	0e 94 7a 00 	call	0xf4	; 0xf4 <_ZN3RTC8i2c_readEv>
     2b4:	68 2f       	mov	r22, r24
     2b6:	ce 01       	movw	r24, r28
     2b8:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN3RTC8bcdTobinEh>
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	f3 01       	movw	r30, r6
     2c0:	91 83       	std	Z+1, r25	; 0x01
     2c2:	80 83       	st	Z, r24
    *hour = bcdTobin(i2c_read());
     2c4:	ce 01       	movw	r24, r28
     2c6:	0e 94 7a 00 	call	0xf4	; 0xf4 <_ZN3RTC8i2c_readEv>
     2ca:	68 2f       	mov	r22, r24
     2cc:	ce 01       	movw	r24, r28
     2ce:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN3RTC8bcdTobinEh>
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	f2 01       	movw	r30, r4
     2d6:	91 83       	std	Z+1, r25	; 0x01
     2d8:	80 83       	st	Z, r24

    *wday = bcdTobin(i2c_read());
     2da:	ce 01       	movw	r24, r28
     2dc:	0e 94 7a 00 	call	0xf4	; 0xf4 <_ZN3RTC8i2c_readEv>
     2e0:	68 2f       	mov	r22, r24
     2e2:	ce 01       	movw	r24, r28
     2e4:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN3RTC8bcdTobinEh>
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	f7 01       	movw	r30, r14
     2ec:	91 83       	std	Z+1, r25	; 0x01
     2ee:	80 83       	st	Z, r24
    *day = bcdTobin(i2c_read());
     2f0:	ce 01       	movw	r24, r28
     2f2:	0e 94 7a 00 	call	0xf4	; 0xf4 <_ZN3RTC8i2c_readEv>
     2f6:	68 2f       	mov	r22, r24
     2f8:	ce 01       	movw	r24, r28
     2fa:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN3RTC8bcdTobinEh>
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	f8 01       	movw	r30, r16
     302:	91 83       	std	Z+1, r25	; 0x01
     304:	80 83       	st	Z, r24
    *month = bcdTobin(i2c_read());
     306:	ce 01       	movw	r24, r28
     308:	0e 94 7a 00 	call	0xf4	; 0xf4 <_ZN3RTC8i2c_readEv>
     30c:	68 2f       	mov	r22, r24
     30e:	ce 01       	movw	r24, r28
     310:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN3RTC8bcdTobinEh>
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	f6 01       	movw	r30, r12
     318:	91 83       	std	Z+1, r25	; 0x01
     31a:	80 83       	st	Z, r24
    *year = bcdTobin(i2c_lastread());
     31c:	ce 01       	movw	r24, r28
     31e:	0e 94 84 00 	call	0x108	; 0x108 <_ZN3RTC12i2c_lastreadEv>
     322:	68 2f       	mov	r22, r24
     324:	ce 01       	movw	r24, r28
     326:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN3RTC8bcdTobinEh>
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	f5 01       	movw	r30, r10
     32e:	91 83       	std	Z+1, r25	; 0x01
     330:	80 83       	st	Z, r24
    i2c_stop();
     332:	ce 01       	movw	r24, r28
     334:	0e 94 6c 00 	call	0xd8	; 0xd8 <_ZN3RTC8i2c_stopEv>

}
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	1f 91       	pop	r17
     33e:	0f 91       	pop	r16
     340:	ff 90       	pop	r15
     342:	ef 90       	pop	r14
     344:	df 90       	pop	r13
     346:	cf 90       	pop	r12
     348:	bf 90       	pop	r11
     34a:	af 90       	pop	r10
     34c:	9f 90       	pop	r9
     34e:	8f 90       	pop	r8
     350:	7f 90       	pop	r7
     352:	6f 90       	pop	r6
     354:	5f 90       	pop	r5
     356:	4f 90       	pop	r4
     358:	08 95       	ret

0000035a <_ZN3RTC4initEv>:

void RTC::init()
{
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	ec 01       	movw	r28, r24
    i2c_init();
     360:	0e 94 60 00 	call	0xc0	; 0xc0 <_ZN3RTC8i2c_initEv>
	clock_init();
     364:	ce 01       	movw	r24, r28
     366:	0e 94 ad 00 	call	0x15a	; 0x15a <_ZN3RTC10clock_initEv>
}
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	08 95       	ret

00000370 <_ZN3RTC7commandEh>:

void RTC::command(unsigned char cmd)
{
	port = (port & 0x0F)|(cmd & 0xF0);
     370:	8b b1       	in	r24, 0x0b	; 11
     372:	8f 70       	andi	r24, 0x0F	; 15
     374:	96 2f       	mov	r25, r22
     376:	90 7f       	andi	r25, 0xF0	; 240
     378:	89 2b       	or	r24, r25
     37a:	8b b9       	out	0x0b, r24	; 11
	port &= ~(1<<rs);
     37c:	8b b1       	in	r24, 0x0b	; 11
     37e:	8e 7f       	andi	r24, 0xFE	; 254
     380:	8b b9       	out	0x0b, r24	; 11
	port |= (1<<en);
     382:	8b b1       	in	r24, 0x0b	; 11
     384:	82 60       	ori	r24, 0x02	; 2
     386:	8b b9       	out	0x0b, r24	; 11
	//_delay_us(2);
	port &= ~(1<<en);
     388:	8b b1       	in	r24, 0x0b	; 11
     38a:	8d 7f       	andi	r24, 0xFD	; 253
     38c:	8b b9       	out	0x0b, r24	; 11
	//_delay_us(200);
	port = (port & 0x0F)|(cmd << 4);
     38e:	8b b1       	in	r24, 0x0b	; 11
     390:	90 e1       	ldi	r25, 0x10	; 16
     392:	69 9f       	mul	r22, r25
     394:	b0 01       	movw	r22, r0
     396:	11 24       	eor	r1, r1
     398:	8f 70       	andi	r24, 0x0F	; 15
     39a:	68 2b       	or	r22, r24
     39c:	6b b9       	out	0x0b, r22	; 11
	port |= (1<<en);
     39e:	8b b1       	in	r24, 0x0b	; 11
     3a0:	82 60       	ori	r24, 0x02	; 2
     3a2:	8b b9       	out	0x0b, r24	; 11
	//_delay_us(2);
	port &= ~(1<<en);
     3a4:	8b b1       	in	r24, 0x0b	; 11
     3a6:	8d 7f       	andi	r24, 0xFD	; 253
     3a8:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3aa:	87 ec       	ldi	r24, 0xC7	; 199
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	01 97       	sbiw	r24, 0x01	; 1
     3b0:	f1 f7       	brne	.-4      	; 0x3ae <_ZN3RTC7commandEh+0x3e>
     3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <_ZN3RTC7commandEh+0x44>
     3b4:	00 00       	nop
     3b6:	08 95       	ret

000003b8 <_ZN3RTC8lcd_initEv>:
	_delay_us(50);
	
}

void RTC::lcd_init(void)
{
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	ec 01       	movw	r28, r24
	direction = 0xFF;
     3be:	8f ef       	ldi	r24, 0xFF	; 255
     3c0:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3c2:	8f e3       	ldi	r24, 0x3F	; 63
     3c4:	9f e1       	ldi	r25, 0x1F	; 31
     3c6:	01 97       	sbiw	r24, 0x01	; 1
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <_ZN3RTC8lcd_initEv+0xe>
     3ca:	00 c0       	rjmp	.+0      	; 0x3cc <_ZN3RTC8lcd_initEv+0x14>
     3cc:	00 00       	nop
	_delay_ms(2);
	
	command(0x02);
     3ce:	62 e0       	ldi	r22, 0x02	; 2
     3d0:	ce 01       	movw	r24, r28
     3d2:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN3RTC7commandEh>
	command(0x28);
     3d6:	68 e2       	ldi	r22, 0x28	; 40
     3d8:	ce 01       	movw	r24, r28
     3da:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN3RTC7commandEh>
	command(0x0c);
     3de:	6c e0       	ldi	r22, 0x0C	; 12
     3e0:	ce 01       	movw	r24, r28
     3e2:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN3RTC7commandEh>
	command(0x06);
     3e6:	66 e0       	ldi	r22, 0x06	; 6
     3e8:	ce 01       	movw	r24, r28
     3ea:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN3RTC7commandEh>
	command(0x01);
     3ee:	61 e0       	ldi	r22, 0x01	; 1
     3f0:	ce 01       	movw	r24, r28
     3f2:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN3RTC7commandEh>
     3f6:	8f e3       	ldi	r24, 0x3F	; 63
     3f8:	9f e1       	ldi	r25, 0x1F	; 31
     3fa:	01 97       	sbiw	r24, 0x01	; 1
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <_ZN3RTC8lcd_initEv+0x42>
     3fe:	00 c0       	rjmp	.+0      	; 0x400 <__EEPROM_REGION_LENGTH__>
     400:	00 00       	nop
	_delay_ms(2);
	
}
     402:	df 91       	pop	r29
     404:	cf 91       	pop	r28
     406:	08 95       	ret

00000408 <_ZN3RTC9characterEh>:
	 }
		 
 }
 void RTC::character(unsigned char data)
 {
	 port = (port & 0x0F)|(data & 0xF0);
     408:	8b b1       	in	r24, 0x0b	; 11
     40a:	8f 70       	andi	r24, 0x0F	; 15
     40c:	96 2f       	mov	r25, r22
     40e:	90 7f       	andi	r25, 0xF0	; 240
     410:	89 2b       	or	r24, r25
     412:	8b b9       	out	0x0b, r24	; 11
	 port |= (1<<rs);
     414:	8b b1       	in	r24, 0x0b	; 11
     416:	81 60       	ori	r24, 0x01	; 1
     418:	8b b9       	out	0x0b, r24	; 11
	 port |= (1<<en);
     41a:	8b b1       	in	r24, 0x0b	; 11
     41c:	82 60       	ori	r24, 0x02	; 2
     41e:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     420:	85 e0       	ldi	r24, 0x05	; 5
     422:	8a 95       	dec	r24
     424:	f1 f7       	brne	.-4      	; 0x422 <_ZN3RTC9characterEh+0x1a>
     426:	00 00       	nop
	 _delay_us(1);
	 port &= ~(1<<en);
     428:	8b b1       	in	r24, 0x0b	; 11
     42a:	8d 7f       	andi	r24, 0xFD	; 253
     42c:	8b b9       	out	0x0b, r24	; 11
	 //_delay_ms(200);
	 port = (port & 0x0F)|(data << 4);
     42e:	8b b1       	in	r24, 0x0b	; 11
     430:	90 e1       	ldi	r25, 0x10	; 16
     432:	69 9f       	mul	r22, r25
     434:	b0 01       	movw	r22, r0
     436:	11 24       	eor	r1, r1
     438:	8f 70       	andi	r24, 0x0F	; 15
     43a:	68 2b       	or	r22, r24
     43c:	6b b9       	out	0x0b, r22	; 11
	 
	 port |= (1<<en);
     43e:	8b b1       	in	r24, 0x0b	; 11
     440:	82 60       	ori	r24, 0x02	; 2
     442:	8b b9       	out	0x0b, r24	; 11
	 //_delay_us(1);
	 port &= ~(1<<en);
     444:	8b b1       	in	r24, 0x0b	; 11
     446:	8d 7f       	andi	r24, 0xFD	; 253
     448:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     44a:	8f e3       	ldi	r24, 0x3F	; 63
     44c:	9f e1       	ldi	r25, 0x1F	; 31
     44e:	01 97       	sbiw	r24, 0x01	; 1
     450:	f1 f7       	brne	.-4      	; 0x44e <_ZN3RTC9characterEh+0x46>
     452:	00 c0       	rjmp	.+0      	; 0x454 <_ZN3RTC9characterEh+0x4c>
     454:	00 00       	nop
     456:	08 95       	ret

00000458 <_ZN3RTC6stringEPc>:
	command(0x01);
	_delay_ms(2);
	
}
 void RTC::string(char *string_00)
 {
     458:	ef 92       	push	r14
     45a:	ff 92       	push	r15
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	7c 01       	movw	r14, r24
     466:	8b 01       	movw	r16, r22
	 int i;
	 for ( i = 0; string_00[i]!=0;i++)
     468:	c0 e0       	ldi	r28, 0x00	; 0
     46a:	d0 e0       	ldi	r29, 0x00	; 0
     46c:	f8 01       	movw	r30, r16
     46e:	ec 0f       	add	r30, r28
     470:	fd 1f       	adc	r31, r29
     472:	60 81       	ld	r22, Z
     474:	66 23       	and	r22, r22
     476:	29 f0       	breq	.+10     	; 0x482 <_ZN3RTC6stringEPc+0x2a>
	 {
		 character(string_00[i]);
     478:	c7 01       	movw	r24, r14
     47a:	0e 94 04 02 	call	0x408	; 0x408 <_ZN3RTC9characterEh>
	
}
 void RTC::string(char *string_00)
 {
	 int i;
	 for ( i = 0; string_00[i]!=0;i++)
     47e:	21 96       	adiw	r28, 0x01	; 1
     480:	f5 cf       	rjmp	.-22     	; 0x46c <_ZN3RTC6stringEPc+0x14>
	 {
		 character(string_00[i]);
	 }
		 
 }
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	1f 91       	pop	r17
     488:	0f 91       	pop	r16
     48a:	ff 90       	pop	r15
     48c:	ef 90       	pop	r14
     48e:	08 95       	ret

00000490 <_ZN3RTC5clearEv>:
	 _delay_ms(2);
	 
 }
 
 void RTC::clear()
 {
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	ec 01       	movw	r28, r24
	 command(0x01);
     496:	61 e0       	ldi	r22, 0x01	; 1
     498:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN3RTC7commandEh>
     49c:	8f e3       	ldi	r24, 0x3F	; 63
     49e:	9f e1       	ldi	r25, 0x1F	; 31
     4a0:	01 97       	sbiw	r24, 0x01	; 1
     4a2:	f1 f7       	brne	.-4      	; 0x4a0 <_ZN3RTC5clearEv+0x10>
     4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <_ZN3RTC5clearEv+0x16>
     4a6:	00 00       	nop
	 _delay_ms(2);
	 command(0x00);
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	ce 01       	movw	r24, r28
     4ac:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN3RTC7commandEh>
 }
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	08 95       	ret

000004b6 <_ZN3RTC9SetCursorEcc>:
 
 void RTC::SetCursor(char row, char col)
 {
	 if (row == 0 && col<16){
     4b6:	61 11       	cpse	r22, r1
     4b8:	08 c0       	rjmp	.+16     	; 0x4ca <_ZN3RTC9SetCursorEcc+0x14>
     4ba:	40 31       	cpi	r20, 0x10	; 16
     4bc:	30 f4       	brcc	.+12     	; 0x4ca <_ZN3RTC9SetCursorEcc+0x14>
		 command((col & 0x0F)|0x80);
     4be:	4f 70       	andi	r20, 0x0F	; 15
     4c0:	64 2f       	mov	r22, r20
     4c2:	60 68       	ori	r22, 0x80	; 128
     4c4:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN3RTC7commandEh>
     4c8:	08 95       	ret
	 }
	 else if(row == 1 && col <16) {
     4ca:	61 30       	cpi	r22, 0x01	; 1
     4cc:	39 f4       	brne	.+14     	; 0x4dc <_ZN3RTC9SetCursorEcc+0x26>
     4ce:	40 31       	cpi	r20, 0x10	; 16
     4d0:	28 f4       	brcc	.+10     	; 0x4dc <_ZN3RTC9SetCursorEcc+0x26>
		 command((col & 0x0F)|0xC0);
     4d2:	4f 70       	andi	r20, 0x0F	; 15
     4d4:	64 2f       	mov	r22, r20
     4d6:	60 6c       	ori	r22, 0xC0	; 192
     4d8:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN3RTC7commandEh>
     4dc:	08 95       	ret

000004de <_ZN3RTC5BlinkEv>:
	 }
 }
 
 void RTC::Blink()
 {
	 command(0x0F);
     4de:	6f e0       	ldi	r22, 0x0F	; 15
     4e0:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN3RTC7commandEh>
     4e4:	08 95       	ret

000004e6 <_ZN3RTC7NoBlinkEv>:
 }
  void RTC::NoBlink()
  {
	  command(0x0C);
     4e6:	6c e0       	ldi	r22, 0x0C	; 12
     4e8:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN3RTC7commandEh>
     4ec:	08 95       	ret

000004ee <_ZN3RTC11DisplayTimeEiiiiiii>:
  }

 // functions 
 void RTC::DisplayTime(int sec,int min,int hour, int day, int wday, int month, int year)
 {
     4ee:	6f 92       	push	r6
     4f0:	7f 92       	push	r7
     4f2:	8f 92       	push	r8
     4f4:	9f 92       	push	r9
     4f6:	af 92       	push	r10
     4f8:	bf 92       	push	r11
     4fa:	cf 92       	push	r12
     4fc:	df 92       	push	r13
     4fe:	ef 92       	push	r14
     500:	ff 92       	push	r15
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	cd b7       	in	r28, 0x3d	; 61
     50c:	de b7       	in	r29, 0x3e	; 62
     50e:	a0 97       	sbiw	r28, 0x20	; 32
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	f8 94       	cli
     514:	de bf       	out	0x3e, r29	; 62
     516:	0f be       	out	0x3f, r0	; 63
     518:	cd bf       	out	0x3d, r28	; 61
     51a:	4c 01       	movw	r8, r24
	 //clear();
	 char time[16];
	 char date[16];
	 sprintf(time,"%.2d:%.2d:%.2d\n",hour,min,sec);
     51c:	7f 93       	push	r23
     51e:	6f 93       	push	r22
     520:	5f 93       	push	r21
     522:	4f 93       	push	r20
     524:	3f 93       	push	r19
     526:	2f 93       	push	r18
     528:	8f e4       	ldi	r24, 0x4F	; 79
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	9f 93       	push	r25
     52e:	8f 93       	push	r24
     530:	ce 01       	movw	r24, r28
     532:	01 96       	adiw	r24, 0x01	; 1
     534:	3c 01       	movw	r6, r24
     536:	9f 93       	push	r25
     538:	8f 93       	push	r24
     53a:	0e 94 41 0a 	call	0x1482	; 0x1482 <sprintf>
	 sprintf(date,"%.2d/%.2d/%.2d",day,month,year);
     53e:	bf 92       	push	r11
     540:	af 92       	push	r10
     542:	df 92       	push	r13
     544:	cf 92       	push	r12
     546:	1f 93       	push	r17
     548:	0f 93       	push	r16
     54a:	8f e5       	ldi	r24, 0x5F	; 95
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	9f 93       	push	r25
     550:	8f 93       	push	r24
     552:	8e 01       	movw	r16, r28
     554:	0f 5e       	subi	r16, 0xEF	; 239
     556:	1f 4f       	sbci	r17, 0xFF	; 255
     558:	1f 93       	push	r17
     55a:	0f 93       	push	r16
     55c:	0e 94 41 0a 	call	0x1482	; 0x1482 <sprintf>
	 string(time);
     560:	b3 01       	movw	r22, r6
     562:	c4 01       	movw	r24, r8
     564:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN3RTC6stringEPc>
	 string("       ");
     568:	62 e8       	ldi	r22, 0x82	; 130
     56a:	71 e0       	ldi	r23, 0x01	; 1
     56c:	c4 01       	movw	r24, r8
     56e:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN3RTC6stringEPc>
	 command(0xC0);
     572:	60 ec       	ldi	r22, 0xC0	; 192
     574:	c4 01       	movw	r24, r8
     576:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN3RTC7commandEh>
	 string(date);
     57a:	b8 01       	movw	r22, r16
     57c:	c4 01       	movw	r24, r8
     57e:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN3RTC6stringEPc>
	 string(" ->");
     582:	6e e6       	ldi	r22, 0x6E	; 110
     584:	71 e0       	ldi	r23, 0x01	; 1
     586:	c4 01       	movw	r24, r8
     588:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN3RTC6stringEPc>
	 string(daysOfweek[wday]);
     58c:	b7 01       	movw	r22, r14
     58e:	66 0f       	add	r22, r22
     590:	77 1f       	adc	r23, r23
     592:	66 0f       	add	r22, r22
     594:	77 1f       	adc	r23, r23
     596:	66 0f       	add	r22, r22
     598:	77 1f       	adc	r23, r23
     59a:	6e 19       	sub	r22, r14
     59c:	7f 09       	sbc	r23, r15
     59e:	60 50       	subi	r22, 0x00	; 0
     5a0:	7f 4f       	sbci	r23, 0xFF	; 255
     5a2:	c4 01       	movw	r24, r8
     5a4:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN3RTC6stringEPc>
 }
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	f8 94       	cli
     5ac:	de bf       	out	0x3e, r29	; 62
     5ae:	0f be       	out	0x3f, r0	; 63
     5b0:	cd bf       	out	0x3d, r28	; 61
     5b2:	a0 96       	adiw	r28, 0x20	; 32
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	f8 94       	cli
     5b8:	de bf       	out	0x3e, r29	; 62
     5ba:	0f be       	out	0x3f, r0	; 63
     5bc:	cd bf       	out	0x3d, r28	; 61
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	1f 91       	pop	r17
     5c4:	0f 91       	pop	r16
     5c6:	ff 90       	pop	r15
     5c8:	ef 90       	pop	r14
     5ca:	df 90       	pop	r13
     5cc:	cf 90       	pop	r12
     5ce:	bf 90       	pop	r11
     5d0:	af 90       	pop	r10
     5d2:	9f 90       	pop	r9
     5d4:	8f 90       	pop	r8
     5d6:	7f 90       	pop	r7
     5d8:	6f 90       	pop	r6
     5da:	08 95       	ret

000005dc <_ZN3RTC16DisplayTimeBlinkEiiiiiiii>:
 
 void RTC::DisplayTimeBlink(int sec,int min,int hour, int day, int wday, int month, int year, int mode)
 {
     5dc:	2f 92       	push	r2
     5de:	3f 92       	push	r3
     5e0:	4f 92       	push	r4
     5e2:	5f 92       	push	r5
     5e4:	6f 92       	push	r6
     5e6:	7f 92       	push	r7
     5e8:	8f 92       	push	r8
     5ea:	9f 92       	push	r9
     5ec:	af 92       	push	r10
     5ee:	bf 92       	push	r11
     5f0:	cf 92       	push	r12
     5f2:	df 92       	push	r13
     5f4:	ef 92       	push	r14
     5f6:	ff 92       	push	r15
     5f8:	0f 93       	push	r16
     5fa:	1f 93       	push	r17
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	cd b7       	in	r28, 0x3d	; 61
     602:	de b7       	in	r29, 0x3e	; 62
     604:	a4 97       	sbiw	r28, 0x24	; 36
     606:	0f b6       	in	r0, 0x3f	; 63
     608:	f8 94       	cli
     60a:	de bf       	out	0x3e, r29	; 62
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	cd bf       	out	0x3d, r28	; 61
     610:	3c 01       	movw	r6, r24
     612:	36 2e       	mov	r3, r22
     614:	27 2e       	mov	r2, r23
     616:	54 2e       	mov	r5, r20
     618:	45 2e       	mov	r4, r21
     61a:	29 a3       	std	Y+33, r18	; 0x21
     61c:	3a a3       	std	Y+34, r19	; 0x22
     61e:	0b a3       	std	Y+35, r16	; 0x23
     620:	1c a3       	std	Y+36, r17	; 0x24
	
	 //clear();
	 SetCursor(0,0);
     622:	40 e0       	ldi	r20, 0x00	; 0
     624:	60 e0       	ldi	r22, 0x00	; 0
     626:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <_ZN3RTC9SetCursorEcc>
	 char time[16];
	 char date[16];
	 sprintf(time,"%.2d:%.2d:%.2d",hour,min,sec);
     62a:	2f 92       	push	r2
     62c:	3f 92       	push	r3
     62e:	4f 92       	push	r4
     630:	5f 92       	push	r5
     632:	2a a1       	ldd	r18, Y+34	; 0x22
     634:	2f 93       	push	r18
     636:	89 a1       	ldd	r24, Y+33	; 0x21
     638:	8f 93       	push	r24
     63a:	82 e7       	ldi	r24, 0x72	; 114
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	9f 93       	push	r25
     640:	8f 93       	push	r24
     642:	8e 01       	movw	r16, r28
     644:	0f 5f       	subi	r16, 0xFF	; 255
     646:	1f 4f       	sbci	r17, 0xFF	; 255
     648:	1f 93       	push	r17
     64a:	0f 93       	push	r16
     64c:	0e 94 41 0a 	call	0x1482	; 0x1482 <sprintf>
	 sprintf(date,"%.2d/%.2d/%.2d",day,month,year);
     650:	bf 92       	push	r11
     652:	af 92       	push	r10
     654:	df 92       	push	r13
     656:	cf 92       	push	r12
     658:	9c a1       	ldd	r25, Y+36	; 0x24
     65a:	9f 93       	push	r25
     65c:	2b a1       	ldd	r18, Y+35	; 0x23
     65e:	2f 93       	push	r18
     660:	8f e5       	ldi	r24, 0x5F	; 95
     662:	91 e0       	ldi	r25, 0x01	; 1
     664:	9f 93       	push	r25
     666:	8f 93       	push	r24
     668:	6e 01       	movw	r12, r28
     66a:	81 e1       	ldi	r24, 0x11	; 17
     66c:	c8 0e       	add	r12, r24
     66e:	d1 1c       	adc	r13, r1
     670:	df 92       	push	r13
     672:	cf 92       	push	r12
     674:	0e 94 41 0a 	call	0x1482	; 0x1482 <sprintf>
	 string(time);
     678:	b8 01       	movw	r22, r16
     67a:	c3 01       	movw	r24, r6
     67c:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN3RTC6stringEPc>
	 string("        ");
     680:	61 e8       	ldi	r22, 0x81	; 129
     682:	71 e0       	ldi	r23, 0x01	; 1
     684:	c3 01       	movw	r24, r6
     686:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN3RTC6stringEPc>
	 command(0xC0);
     68a:	60 ec       	ldi	r22, 0xC0	; 192
     68c:	c3 01       	movw	r24, r6
     68e:	0e 94 b8 01 	call	0x370	; 0x370 <_ZN3RTC7commandEh>
	 string(date);
     692:	b6 01       	movw	r22, r12
     694:	c3 01       	movw	r24, r6
     696:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN3RTC6stringEPc>
	 string(" ->");
     69a:	6e e6       	ldi	r22, 0x6E	; 110
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	c3 01       	movw	r24, r6
     6a0:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN3RTC6stringEPc>
	 string(daysOfweek[wday]);
     6a4:	b7 01       	movw	r22, r14
     6a6:	66 0f       	add	r22, r22
     6a8:	77 1f       	adc	r23, r23
     6aa:	66 0f       	add	r22, r22
     6ac:	77 1f       	adc	r23, r23
     6ae:	66 0f       	add	r22, r22
     6b0:	77 1f       	adc	r23, r23
     6b2:	6e 19       	sub	r22, r14
     6b4:	7f 09       	sbc	r23, r15
     6b6:	60 50       	subi	r22, 0x00	; 0
     6b8:	7f 4f       	sbci	r23, 0xFF	; 255
     6ba:	c3 01       	movw	r24, r6
     6bc:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN3RTC6stringEPc>
	 int col = pos[mode][0];
     6c0:	f4 01       	movw	r30, r8
     6c2:	ee 0f       	add	r30, r30
     6c4:	ff 1f       	adc	r31, r31
     6c6:	ee 0f       	add	r30, r30
     6c8:	ff 1f       	adc	r31, r31
     6ca:	ef 5c       	subi	r30, 0xCF	; 207
     6cc:	fe 4f       	sbci	r31, 0xFE	; 254
     6ce:	40 81       	ld	r20, Z
	 int row = pos[mode][1];
     6d0:	62 81       	ldd	r22, Z+2	; 0x02
	 SetCursor(row,col);
     6d2:	c3 01       	movw	r24, r6
     6d4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <_ZN3RTC9SetCursorEcc>
	 {
		 Blink();
		 _delay_ms(5);
		 NoBlink();
	 }*/
	Blink();
     6d8:	c3 01       	movw	r24, r6
     6da:	0e 94 6f 02 	call	0x4de	; 0x4de <_ZN3RTC5BlinkEv>
     6de:	9f ef       	ldi	r25, 0xFF	; 255
     6e0:	21 ee       	ldi	r18, 0xE1	; 225
     6e2:	84 e0       	ldi	r24, 0x04	; 4
     6e4:	91 50       	subi	r25, 0x01	; 1
     6e6:	20 40       	sbci	r18, 0x00	; 0
     6e8:	80 40       	sbci	r24, 0x00	; 0
     6ea:	e1 f7       	brne	.-8      	; 0x6e4 <_ZN3RTC16DisplayTimeBlinkEiiiiiiii+0x108>
     6ec:	00 c0       	rjmp	.+0      	; 0x6ee <_ZN3RTC16DisplayTimeBlinkEiiiiiiii+0x112>
     6ee:	00 00       	nop
	//NoBlink();

	 
	 //clear();
	 //_delay_us(1);
 }
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	f8 94       	cli
     6f4:	de bf       	out	0x3e, r29	; 62
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	cd bf       	out	0x3d, r28	; 61
     6fa:	a4 96       	adiw	r28, 0x24	; 36
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	f8 94       	cli
     700:	de bf       	out	0x3e, r29	; 62
     702:	0f be       	out	0x3f, r0	; 63
     704:	cd bf       	out	0x3d, r28	; 61
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	1f 91       	pop	r17
     70c:	0f 91       	pop	r16
     70e:	ff 90       	pop	r15
     710:	ef 90       	pop	r14
     712:	df 90       	pop	r13
     714:	cf 90       	pop	r12
     716:	bf 90       	pop	r11
     718:	af 90       	pop	r10
     71a:	9f 90       	pop	r9
     71c:	8f 90       	pop	r8
     71e:	7f 90       	pop	r7
     720:	6f 90       	pop	r6
     722:	5f 90       	pop	r5
     724:	4f 90       	pop	r4
     726:	3f 90       	pop	r3
     728:	2f 90       	pop	r2
     72a:	08 95       	ret

0000072c <_ZN3RTC9alarmdispEiiiii>:
 
 void RTC::alarmdisp(int min, int hour, int day, int mon, int mode)
 {
     72c:	4f 92       	push	r4
     72e:	5f 92       	push	r5
     730:	6f 92       	push	r6
     732:	7f 92       	push	r7
     734:	8f 92       	push	r8
     736:	9f 92       	push	r9
     738:	af 92       	push	r10
     73a:	bf 92       	push	r11
     73c:	cf 92       	push	r12
     73e:	df 92       	push	r13
     740:	ef 92       	push	r14
     742:	ff 92       	push	r15
     744:	0f 93       	push	r16
     746:	1f 93       	push	r17
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	cd b7       	in	r28, 0x3d	; 61
     74e:	de b7       	in	r29, 0x3e	; 62
     750:	a0 97       	sbiw	r28, 0x20	; 32
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	f8 94       	cli
     756:	de bf       	out	0x3e, r29	; 62
     758:	0f be       	out	0x3f, r0	; 63
     75a:	cd bf       	out	0x3d, r28	; 61
     75c:	6c 01       	movw	r12, r24
     75e:	76 2e       	mov	r7, r22
     760:	67 2e       	mov	r6, r23
     762:	b4 2e       	mov	r11, r20
     764:	a5 2e       	mov	r10, r21
     766:	42 2e       	mov	r4, r18
     768:	53 2e       	mov	r5, r19
	 //clear();
	 SetCursor(0,0);
     76a:	40 e0       	ldi	r20, 0x00	; 0
     76c:	60 e0       	ldi	r22, 0x00	; 0
     76e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <_ZN3RTC9SetCursorEcc>
	 char time[16];
	 char date[16];
	 int row;
	 int col;
	 sprintf(time,"H:M -> %.2d:%.2d   ",hour,min);
     772:	6f 92       	push	r6
     774:	7f 92       	push	r7
     776:	af 92       	push	r10
     778:	bf 92       	push	r11
     77a:	8a e8       	ldi	r24, 0x8A	; 138
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	9f 93       	push	r25
     780:	8f 93       	push	r24
     782:	ce 01       	movw	r24, r28
     784:	01 96       	adiw	r24, 0x01	; 1
     786:	5c 01       	movw	r10, r24
     788:	9f 93       	push	r25
     78a:	8f 93       	push	r24
     78c:	0e 94 41 0a 	call	0x1482	; 0x1482 <sprintf>
	 sprintf(date,"D/M -> %.2d/%.2d   ",day,mon);
     790:	1f 93       	push	r17
     792:	0f 93       	push	r16
     794:	5f 92       	push	r5
     796:	4f 92       	push	r4
     798:	8e e9       	ldi	r24, 0x9E	; 158
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	9f 93       	push	r25
     79e:	8f 93       	push	r24
     7a0:	8e 01       	movw	r16, r28
     7a2:	0f 5e       	subi	r16, 0xEF	; 239
     7a4:	1f 4f       	sbci	r17, 0xFF	; 255
     7a6:	1f 93       	push	r17
     7a8:	0f 93       	push	r16
     7aa:	0e 94 41 0a 	call	0x1482	; 0x1482 <sprintf>
	 string(time);
     7ae:	b5 01       	movw	r22, r10
     7b0:	c6 01       	movw	r24, r12
     7b2:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN3RTC6stringEPc>
	 SetCursor(1,0);
     7b6:	40 e0       	ldi	r20, 0x00	; 0
     7b8:	61 e0       	ldi	r22, 0x01	; 1
     7ba:	c6 01       	movw	r24, r12
     7bc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <_ZN3RTC9SetCursorEcc>
	 string(date);
     7c0:	b8 01       	movw	r22, r16
     7c2:	c6 01       	movw	r24, r12
     7c4:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN3RTC6stringEPc>
	 if (mode == 1){
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	f8 94       	cli
     7cc:	de bf       	out	0x3e, r29	; 62
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	cd bf       	out	0x3d, r28	; 61
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	e9 16       	cp	r14, r25
     7d6:	f1 04       	cpc	r15, r1
     7d8:	61 f0       	breq	.+24     	; 0x7f2 <_ZN3RTC9alarmdispEiiiii+0xc6>
		 col = 8; 
		 row = 0;
	 }
	 else if (mode == 0){
     7da:	e1 14       	cp	r14, r1
     7dc:	f1 04       	cpc	r15, r1
     7de:	71 f0       	breq	.+28     	; 0x7fc <_ZN3RTC9alarmdispEiiiii+0xd0>
		 col = 11;
		 row = 0;
	 }
	 else if (mode == 2){
     7e0:	82 e0       	ldi	r24, 0x02	; 2
     7e2:	e8 16       	cp	r14, r24
     7e4:	f1 04       	cpc	r15, r1
     7e6:	81 f0       	breq	.+32     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
		 col = 8;
		 row = 1;
	 }
	 else if (mode == 3){
     7e8:	93 e0       	ldi	r25, 0x03	; 3
     7ea:	e9 16       	cp	r14, r25
     7ec:	f1 04       	cpc	r15, r1
     7ee:	c1 f4       	brne	.+48     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     7f0:	11 c0       	rjmp	.+34     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
	 sprintf(date,"D/M -> %.2d/%.2d   ",day,mon);
	 string(time);
	 SetCursor(1,0);
	 string(date);
	 if (mode == 1){
		 col = 8; 
     7f2:	68 94       	set
     7f4:	88 24       	eor	r8, r8
     7f6:	83 f8       	bld	r8, 3
		 row = 0;
     7f8:	91 2c       	mov	r9, r1
     7fa:	12 c0       	rjmp	.+36     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
	 }
	 else if (mode == 0){
		 col = 11;
     7fc:	0f 2e       	mov	r0, r31
     7fe:	fb e0       	ldi	r31, 0x0B	; 11
     800:	8f 2e       	mov	r8, r31
     802:	f0 2d       	mov	r31, r0
		 row = 0;
     804:	91 2c       	mov	r9, r1
     806:	0c c0       	rjmp	.+24     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
	 }
	 else if (mode == 2){
		 col = 8;
     808:	68 94       	set
     80a:	88 24       	eor	r8, r8
     80c:	83 f8       	bld	r8, 3
		 row = 1;
     80e:	99 24       	eor	r9, r9
     810:	93 94       	inc	r9
     812:	06 c0       	rjmp	.+12     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
	 }
	 else if (mode == 3){
		 col = 11;
     814:	0f 2e       	mov	r0, r31
     816:	fb e0       	ldi	r31, 0x0B	; 11
     818:	8f 2e       	mov	r8, r31
     81a:	f0 2d       	mov	r31, r0
		 row = 1;
     81c:	99 24       	eor	r9, r9
     81e:	93 94       	inc	r9
	 }
	 
	 SetCursor(row,col);
     820:	48 2d       	mov	r20, r8
     822:	69 2d       	mov	r22, r9
     824:	c6 01       	movw	r24, r12
     826:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <_ZN3RTC9SetCursorEcc>

	Blink();
     82a:	c6 01       	movw	r24, r12
     82c:	0e 94 6f 02 	call	0x4de	; 0x4de <_ZN3RTC5BlinkEv>
	//_delay_ms(100);
	//NoBlink();
}
     830:	a0 96       	adiw	r28, 0x20	; 32
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	f8 94       	cli
     836:	de bf       	out	0x3e, r29	; 62
     838:	0f be       	out	0x3f, r0	; 63
     83a:	cd bf       	out	0x3d, r28	; 61
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	ff 90       	pop	r15
     846:	ef 90       	pop	r14
     848:	df 90       	pop	r13
     84a:	cf 90       	pop	r12
     84c:	bf 90       	pop	r11
     84e:	af 90       	pop	r10
     850:	9f 90       	pop	r9
     852:	8f 90       	pop	r8
     854:	7f 90       	pop	r7
     856:	6f 90       	pop	r6
     858:	5f 90       	pop	r5
     85a:	4f 90       	pop	r4
     85c:	08 95       	ret

0000085e <_ZN3RTC8slotdispEi>:
 
 void RTC::slotdisp(int slot)
 {
     85e:	ef 92       	push	r14
     860:	ff 92       	push	r15
     862:	0f 93       	push	r16
     864:	1f 93       	push	r17
     866:	cf 93       	push	r28
     868:	df 93       	push	r29
     86a:	cd b7       	in	r28, 0x3d	; 61
     86c:	de b7       	in	r29, 0x3e	; 62
     86e:	60 97       	sbiw	r28, 0x10	; 16
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	f8 94       	cli
     874:	de bf       	out	0x3e, r29	; 62
     876:	0f be       	out	0x3f, r0	; 63
     878:	cd bf       	out	0x3d, r28	; 61
     87a:	8c 01       	movw	r16, r24
     87c:	f6 2e       	mov	r15, r22
     87e:	e7 2e       	mov	r14, r23
	 //clear();
	 SetCursor(0,0);
     880:	40 e0       	ldi	r20, 0x00	; 0
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <_ZN3RTC9SetCursorEcc>
	 string("SELECT SLOT(0-4)      ");
     888:	62 eb       	ldi	r22, 0xB2	; 178
     88a:	71 e0       	ldi	r23, 0x01	; 1
     88c:	c8 01       	movw	r24, r16
     88e:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN3RTC6stringEPc>
	 SetCursor(1,0);
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	61 e0       	ldi	r22, 0x01	; 1
     896:	c8 01       	movw	r24, r16
     898:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <_ZN3RTC9SetCursorEcc>
	 char slot_[16];
	 sprintf(slot_, "%d",slot);
     89c:	ef 92       	push	r14
     89e:	ff 92       	push	r15
     8a0:	89 ec       	ldi	r24, 0xC9	; 201
     8a2:	91 e0       	ldi	r25, 0x01	; 1
     8a4:	9f 93       	push	r25
     8a6:	8f 93       	push	r24
     8a8:	ce 01       	movw	r24, r28
     8aa:	01 96       	adiw	r24, 0x01	; 1
     8ac:	7c 01       	movw	r14, r24
     8ae:	9f 93       	push	r25
     8b0:	8f 93       	push	r24
     8b2:	0e 94 41 0a 	call	0x1482	; 0x1482 <sprintf>
	 string(slot_);
     8b6:	b7 01       	movw	r22, r14
     8b8:	c8 01       	movw	r24, r16
     8ba:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN3RTC6stringEPc>
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	0f 90       	pop	r0
     8c8:	0f 90       	pop	r0
     8ca:	60 96       	adiw	r28, 0x10	; 16
     8cc:	0f b6       	in	r0, 0x3f	; 63
     8ce:	f8 94       	cli
     8d0:	de bf       	out	0x3e, r29	; 62
     8d2:	0f be       	out	0x3f, r0	; 63
     8d4:	cd bf       	out	0x3d, r28	; 61
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	1f 91       	pop	r17
     8dc:	0f 91       	pop	r16
     8de:	ff 90       	pop	r15
     8e0:	ef 90       	pop	r14
     8e2:	08 95       	ret

000008e4 <_Z41__static_initialization_and_destruction_0ii>:
		
		_delay_ms(200);
	}
	
	
     8e4:	01 97       	sbiw	r24, 0x01	; 1
     8e6:	49 f4       	brne	.+18     	; 0x8fa <_Z41__static_initialization_and_destruction_0ii+0x16>
     8e8:	6f 3f       	cpi	r22, 0xFF	; 255
     8ea:	7f 4f       	sbci	r23, 0xFF	; 255
     8ec:	31 f4       	brne	.+12     	; 0x8fa <_Z41__static_initialization_and_destruction_0ii+0x16>
#include "RTC.h"

#include <stdio.h>


RTC rtc(1);
     8ee:	61 e0       	ldi	r22, 0x01	; 1
     8f0:	70 e0       	ldi	r23, 0x00	; 0
     8f2:	8c ec       	ldi	r24, 0xCC	; 204
     8f4:	91 e0       	ldi	r25, 0x01	; 1
     8f6:	0e 94 5f 00 	call	0xbe	; 0xbe <_ZN3RTCC1Ei>
     8fa:	08 95       	ret

000008fc <main>:

int main()
{
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	cd b7       	in	r28, 0x3d	; 61
     902:	de b7       	in	r29, 0x3e	; 62
     904:	c3 57       	subi	r28, 0x73	; 115
     906:	d1 09       	sbc	r29, r1
     908:	0f b6       	in	r0, 0x3f	; 63
     90a:	f8 94       	cli
     90c:	de bf       	out	0x3e, r29	; 62
     90e:	0f be       	out	0x3f, r0	; 63
     910:	cd bf       	out	0x3d, r28	; 61
	
	rtc.init();
     912:	8c ec       	ldi	r24, 0xCC	; 204
     914:	91 e0       	ldi	r25, 0x01	; 1
     916:	0e 94 ad 01 	call	0x35a	; 0x35a <_ZN3RTC4initEv>
	rtc.lcd_init();
     91a:	8c ec       	ldi	r24, 0xCC	; 204
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_ZN3RTC8lcd_initEv>
	
	
	DDRB = 0b00000000;
     922:	14 b8       	out	0x04, r1	; 4
	DDRD = 0b00000100;
     924:	84 e0       	ldi	r24, 0x04	; 4
     926:	8a b9       	out	0x0a, r24	; 10
	PORTB = 0b00111111;
     928:	8f e3       	ldi	r24, 0x3F	; 63
     92a:	85 b9       	out	0x05, r24	; 5
	
	
	rtc.setTime(0,0,0,1,1,4,21);
     92c:	0f 2e       	mov	r0, r31
     92e:	f5 e1       	ldi	r31, 0x15	; 21
     930:	af 2e       	mov	r10, r31
     932:	b1 2c       	mov	r11, r1
     934:	f0 2d       	mov	r31, r0
     936:	68 94       	set
     938:	cc 24       	eor	r12, r12
     93a:	c2 f8       	bld	r12, 2
     93c:	d1 2c       	mov	r13, r1
     93e:	ee 24       	eor	r14, r14
     940:	e3 94       	inc	r14
     942:	f1 2c       	mov	r15, r1
     944:	01 e0       	ldi	r16, 0x01	; 1
     946:	10 e0       	ldi	r17, 0x00	; 0
     948:	20 e0       	ldi	r18, 0x00	; 0
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	8c ec       	ldi	r24, 0xCC	; 204
     956:	91 e0       	ldi	r25, 0x01	; 1
     958:	0e 94 c8 00 	call	0x190	; 0x190 <_ZN3RTC7setTimeEiiiiiii>
	
	int IsEditingmode = 0;
	int modeStatus = 0;
	int isalarmeditingmode = 0;
	int alarmmode = 0;
	int alarm_min[5] = {0, 0, 0, 0, 0}; // variables for set the alarm
     95c:	8a e0       	ldi	r24, 0x0A	; 10
     95e:	fe 01       	movw	r30, r28
     960:	31 96       	adiw	r30, 0x01	; 1
     962:	df 01       	movw	r26, r30
     964:	08 2f       	mov	r16, r24
     966:	1d 92       	st	X+, r1
     968:	0a 95       	dec	r16
     96a:	e9 f7       	brne	.-6      	; 0x966 <__stack+0x67>
	int alarmMin = 0;
	int alarmHour = 0;
	int alarm_hour[5] = {0, 0, 0, 0, 0};//  variables for set the alarm
     96c:	3a 96       	adiw	r30, 0x0a	; 10
     96e:	df 01       	movw	r26, r30
     970:	08 2f       	mov	r16, r24
     972:	1d 92       	st	X+, r1
     974:	0a 95       	dec	r16
     976:	e9 f7       	brne	.-6      	; 0x972 <__stack+0x73>
	
	int alarm_date[5] = {0, 0, 0, 0, 0}; // variables for set the alarm
     978:	3a 96       	adiw	r30, 0x0a	; 10
     97a:	df 01       	movw	r26, r30
     97c:	08 2f       	mov	r16, r24
     97e:	1d 92       	st	X+, r1
     980:	0a 95       	dec	r16
     982:	e9 f7       	brne	.-6      	; 0x97e <__stack+0x7f>
	int alarmDay = 0;
	int alarmMon = 0;
	int alarm_mon[5] = {0, 0, 0, 0, 0};//  variables for set the alarm
     984:	3a 96       	adiw	r30, 0x0a	; 10
     986:	df 01       	movw	r26, r30
     988:	08 2f       	mov	r16, r24
     98a:	1d 92       	st	X+, r1
     98c:	0a 95       	dec	r16
     98e:	e9 f7       	brne	.-6      	; 0x98a <__stack+0x8b>
		
	int init_alarm[5] = {0, 0, 0, 0, 0};	
     990:	3a 96       	adiw	r30, 0x0a	; 10
     992:	df 01       	movw	r26, r30
     994:	1d 92       	st	X+, r1
     996:	8a 95       	dec	r24
     998:	e9 f7       	brne	.-6      	; 0x994 <__stack+0x95>
	int manual_stop[5] = {1, 1, 1, 1, 1};
     99a:	8a e0       	ldi	r24, 0x0A	; 10
     99c:	e5 e4       	ldi	r30, 0x45	; 69
     99e:	f1 e0       	ldi	r31, 0x01	; 1
     9a0:	de 01       	movw	r26, r28
     9a2:	d3 96       	adiw	r26, 0x33	; 51
     9a4:	01 90       	ld	r0, Z+
     9a6:	0d 92       	st	X+, r0
     9a8:	8a 95       	dec	r24
     9aa:	e1 f7       	brne	.-8      	; 0x9a4 <__stack+0xa5>
	int alarmslot = 0;
	int select_slot = 0;
	int current_alarm;
	int isalarmblinking = 0;
	int var = 0;	
     9ac:	a8 96       	adiw	r28, 0x28	; 40
     9ae:	1f ae       	std	Y+63, r1	; 0x3f
     9b0:	1e ae       	std	Y+62, r1	; 0x3e
     9b2:	a8 97       	sbiw	r28, 0x28	; 40
	int init_alarm[5] = {0, 0, 0, 0, 0};	
	int manual_stop[5] = {1, 1, 1, 1, 1};
	int alarmslot = 0;
	int select_slot = 0;
	int current_alarm;
	int isalarmblinking = 0;
     9b4:	62 96       	adiw	r28, 0x12	; 18
     9b6:	1f ae       	std	Y+63, r1	; 0x3f
     9b8:	1e ae       	std	Y+62, r1	; 0x3e
     9ba:	62 97       	sbiw	r28, 0x12	; 18
	int alarm_mon[5] = {0, 0, 0, 0, 0};//  variables for set the alarm
		
	int init_alarm[5] = {0, 0, 0, 0, 0};	
	int manual_stop[5] = {1, 1, 1, 1, 1};
	int alarmslot = 0;
	int select_slot = 0;
     9bc:	a6 96       	adiw	r28, 0x26	; 38
     9be:	1f ae       	std	Y+63, r1	; 0x3f
     9c0:	1e ae       	std	Y+62, r1	; 0x3e
     9c2:	a6 97       	sbiw	r28, 0x26	; 38
	int alarmMon = 0;
	int alarm_mon[5] = {0, 0, 0, 0, 0};//  variables for set the alarm
		
	int init_alarm[5] = {0, 0, 0, 0, 0};	
	int manual_stop[5] = {1, 1, 1, 1, 1};
	int alarmslot = 0;
     9c4:	aa 96       	adiw	r28, 0x2a	; 42
     9c6:	1f ae       	std	Y+63, r1	; 0x3f
     9c8:	1e ae       	std	Y+62, r1	; 0x3e
     9ca:	aa 97       	sbiw	r28, 0x2a	; 42
	int alarmHour = 0;
	int alarm_hour[5] = {0, 0, 0, 0, 0};//  variables for set the alarm
	
	int alarm_date[5] = {0, 0, 0, 0, 0}; // variables for set the alarm
	int alarmDay = 0;
	int alarmMon = 0;
     9cc:	e4 96       	adiw	r28, 0x34	; 52
     9ce:	1f ae       	std	Y+63, r1	; 0x3f
     9d0:	1e ae       	std	Y+62, r1	; 0x3e
     9d2:	e4 97       	sbiw	r28, 0x34	; 52
	int alarmMin = 0;
	int alarmHour = 0;
	int alarm_hour[5] = {0, 0, 0, 0, 0};//  variables for set the alarm
	
	int alarm_date[5] = {0, 0, 0, 0, 0}; // variables for set the alarm
	int alarmDay = 0;
     9d4:	e2 96       	adiw	r28, 0x32	; 50
     9d6:	1f ae       	std	Y+63, r1	; 0x3f
     9d8:	1e ae       	std	Y+62, r1	; 0x3e
     9da:	e2 97       	sbiw	r28, 0x32	; 50
	int modeStatus = 0;
	int isalarmeditingmode = 0;
	int alarmmode = 0;
	int alarm_min[5] = {0, 0, 0, 0, 0}; // variables for set the alarm
	int alarmMin = 0;
	int alarmHour = 0;
     9dc:	e0 96       	adiw	r28, 0x30	; 48
     9de:	1f ae       	std	Y+63, r1	; 0x3f
     9e0:	1e ae       	std	Y+62, r1	; 0x3e
     9e2:	e0 97       	sbiw	r28, 0x30	; 48
	int IsEditingmode = 0;
	int modeStatus = 0;
	int isalarmeditingmode = 0;
	int alarmmode = 0;
	int alarm_min[5] = {0, 0, 0, 0, 0}; // variables for set the alarm
	int alarmMin = 0;
     9e4:	ae 96       	adiw	r28, 0x2e	; 46
     9e6:	1f ae       	std	Y+63, r1	; 0x3f
     9e8:	1e ae       	std	Y+62, r1	; 0x3e
     9ea:	ae 97       	sbiw	r28, 0x2e	; 46
	
	
	int IsEditingmode = 0;
	int modeStatus = 0;
	int isalarmeditingmode = 0;
	int alarmmode = 0;
     9ec:	ac 96       	adiw	r28, 0x2c	; 44
     9ee:	1f ae       	std	Y+63, r1	; 0x3f
     9f0:	1e ae       	std	Y+62, r1	; 0x3e
     9f2:	ac 97       	sbiw	r28, 0x2c	; 44
	
	
	
	int IsEditingmode = 0;
	int modeStatus = 0;
	int isalarmeditingmode = 0;
     9f4:	60 96       	adiw	r28, 0x10	; 16
     9f6:	1f ae       	std	Y+63, r1	; 0x3f
     9f8:	1e ae       	std	Y+62, r1	; 0x3e
     9fa:	60 97       	sbiw	r28, 0x10	; 16
	rtc.setTime(0,0,0,1,1,4,21);
	
	
	
	int IsEditingmode = 0;
	int modeStatus = 0;
     9fc:	21 2c       	mov	r2, r1
     9fe:	31 2c       	mov	r3, r1
	
	rtc.setTime(0,0,0,1,1,4,21);
	
	
	
	int IsEditingmode = 0;
     a00:	41 2c       	mov	r4, r1
     a02:	51 2c       	mov	r5, r1

	
	
	while (1)
	{
		rtc.lcd_init();
     a04:	8c ec       	ldi	r24, 0xCC	; 204
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_ZN3RTC8lcd_initEv>
		int sec, min, hour, day, wday, month, year;
		int sec1, min1, hour1, day1, wday1, month1, year1;
		rtc.NoBlink();
     a0c:	8c ec       	ldi	r24, 0xCC	; 204
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	0e 94 73 02 	call	0x4e6	; 0x4e6 <_ZN3RTC7NoBlinkEv>
		//rtc.ReadTime(&sec,&min,&hour,&day,&wday,&month,&year);
		rtc.ReadTime(&sec1,&min1,&hour1,&day1,&wday1,&month1,&year1);
     a14:	fe 01       	movw	r30, r28
     a16:	fd 96       	adiw	r30, 0x3d	; 61
     a18:	5f 01       	movw	r10, r30
     a1a:	8e 01       	movw	r16, r28
     a1c:	01 5c       	subi	r16, 0xC1	; 193
     a1e:	1f 4f       	sbci	r17, 0xFF	; 255
     a20:	68 01       	movw	r12, r16
     a22:	9e 01       	movw	r18, r28
     a24:	2f 5b       	subi	r18, 0xBF	; 191
     a26:	3f 4f       	sbci	r19, 0xFF	; 255
     a28:	79 01       	movw	r14, r18
     a2a:	0c 5f       	subi	r16, 0xFC	; 252
     a2c:	1f 4f       	sbci	r17, 0xFF	; 255
     a2e:	2c 5f       	subi	r18, 0xFC	; 252
     a30:	3f 4f       	sbci	r19, 0xFF	; 255
     a32:	ae 01       	movw	r20, r28
     a34:	49 5b       	subi	r20, 0xB9	; 185
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	be 01       	movw	r22, r28
     a3a:	67 5b       	subi	r22, 0xB7	; 183
     a3c:	7f 4f       	sbci	r23, 0xFF	; 255
     a3e:	8c ec       	ldi	r24, 0xCC	; 204
     a40:	91 e0       	ldi	r25, 0x01	; 1
     a42:	0e 94 24 01 	call	0x248	; 0x248 <_ZN3RTC8ReadTimeEPiS0_S0_S0_S0_S0_S0_>
		int modeButton = !(PINB & 0b00000001);
     a46:	83 b1       	in	r24, 0x03	; 3
     a48:	71 e0       	ldi	r23, 0x01	; 1
     a4a:	38 2f       	mov	r19, r24
     a4c:	31 70       	andi	r19, 0x01	; 1
     a4e:	6f 96       	adiw	r28, 0x1f	; 31
     a50:	3f af       	std	Y+63, r19	; 0x3f
     a52:	6f 97       	sbiw	r28, 0x1f	; 31
     a54:	a0 96       	adiw	r28, 0x20	; 32
     a56:	1f ae       	std	Y+63, r1	; 0x3f
     a58:	a0 97       	sbiw	r28, 0x20	; 32
     a5a:	80 fd       	sbrc	r24, 0
     a5c:	70 e0       	ldi	r23, 0x00	; 0
		int increment = !(PINB & 0b00000010);
     a5e:	83 b1       	in	r24, 0x03	; 3
     a60:	82 70       	andi	r24, 0x02	; 2
     a62:	a8 2e       	mov	r10, r24
     a64:	b1 2c       	mov	r11, r1
     a66:	a1 e0       	ldi	r26, 0x01	; 1
     a68:	a1 14       	cp	r10, r1
     a6a:	b1 04       	cpc	r11, r1
     a6c:	09 f0       	breq	.+2      	; 0xa70 <__stack+0x171>
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
		int decrement = !(PINB & 0b00000100);
     a70:	83 b1       	in	r24, 0x03	; 3
     a72:	84 70       	andi	r24, 0x04	; 4
     a74:	88 2e       	mov	r8, r24
     a76:	91 2c       	mov	r9, r1
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	6d 96       	adiw	r28, 0x1d	; 29
     a7c:	8f af       	std	Y+63, r24	; 0x3f
     a7e:	6d 97       	sbiw	r28, 0x1d	; 29
     a80:	81 14       	cp	r8, r1
     a82:	91 04       	cpc	r9, r1
     a84:	19 f0       	breq	.+6      	; 0xa8c <__stack+0x18d>
     a86:	6d 96       	adiw	r28, 0x1d	; 29
     a88:	1f ae       	std	Y+63, r1	; 0x3f
     a8a:	6d 97       	sbiw	r28, 0x1d	; 29
		int setButton = !(PINB & 0b00001000);
     a8c:	83 b1       	in	r24, 0x03	; 3
     a8e:	88 70       	andi	r24, 0x08	; 8
     a90:	c8 2e       	mov	r12, r24
     a92:	d1 2c       	mov	r13, r1
     a94:	91 e0       	ldi	r25, 0x01	; 1
     a96:	6e 96       	adiw	r28, 0x1e	; 30
     a98:	9f af       	std	Y+63, r25	; 0x3f
     a9a:	6e 97       	sbiw	r28, 0x1e	; 30
     a9c:	c1 14       	cp	r12, r1
     a9e:	d1 04       	cpc	r13, r1
     aa0:	19 f0       	breq	.+6      	; 0xaa8 <__stack+0x1a9>
     aa2:	6e 96       	adiw	r28, 0x1e	; 30
     aa4:	1f ae       	std	Y+63, r1	; 0x3f
     aa6:	6e 97       	sbiw	r28, 0x1e	; 30
		int alarmButton = !(PINB & 0b00010000);
     aa8:	63 b1       	in	r22, 0x03	; 3
     aaa:	62 95       	swap	r22
     aac:	6f 70       	andi	r22, 0x0F	; 15
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	68 27       	eor	r22, r24
     ab2:	61 70       	andi	r22, 0x01	; 1
		int backButton = !(PINB & 0b00100000);
     ab4:	83 b1       	in	r24, 0x03	; 3
     ab6:	80 72       	andi	r24, 0x20	; 32
     ab8:	e8 2f       	mov	r30, r24
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	a2 96       	adiw	r28, 0x22	; 34
     abe:	ff af       	std	Y+63, r31	; 0x3f
     ac0:	ee af       	std	Y+62, r30	; 0x3e
     ac2:	a2 97       	sbiw	r28, 0x22	; 34
		if (sec<=3 & min == 0 & hour == 0){
     ac4:	91 e0       	ldi	r25, 0x01	; 1
     ac6:	64 96       	adiw	r28, 0x14	; 20
     ac8:	0e ad       	ldd	r16, Y+62	; 0x3e
     aca:	1f ad       	ldd	r17, Y+63	; 0x3f
     acc:	64 97       	sbiw	r28, 0x14	; 20
     ace:	04 30       	cpi	r16, 0x04	; 4
     ad0:	11 05       	cpc	r17, r1
     ad2:	0c f0       	brlt	.+2      	; 0xad6 <__stack+0x1d7>
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	61 14       	cp	r6, r1
     ada:	71 04       	cpc	r7, r1
     adc:	09 f0       	breq	.+2      	; 0xae0 <__stack+0x1e1>
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	89 23       	and	r24, r25
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	2e 96       	adiw	r28, 0x0e	; 14
     ae6:	2e ad       	ldd	r18, Y+62	; 0x3e
     ae8:	3f ad       	ldd	r19, Y+63	; 0x3f
     aea:	2e 97       	sbiw	r28, 0x0e	; 14
     aec:	23 2b       	or	r18, r19
     aee:	09 f0       	breq	.+2      	; 0xaf2 <__stack+0x1f3>
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	88 23       	and	r24, r24
     af4:	b1 f0       	breq	.+44     	; 0xb22 <__stack+0x223>
     af6:	99 23       	and	r25, r25
     af8:	a1 f0       	breq	.+40     	; 0xb22 <__stack+0x223>
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	90 e0       	ldi	r25, 0x00	; 0
			    for (int slot = 0; slot < 5; slot++) {
     afe:	85 30       	cpi	r24, 0x05	; 5
     b00:	91 05       	cpc	r25, r1
     b02:	7c f4       	brge	.+30     	; 0xb22 <__stack+0x223>
				    manual_stop[slot] = 1;// renew alarms everyday
     b04:	fc 01       	movw	r30, r24
     b06:	ee 0f       	add	r30, r30
     b08:	ff 1f       	adc	r31, r31
     b0a:	01 e0       	ldi	r16, 0x01	; 1
     b0c:	10 e0       	ldi	r17, 0x00	; 0
     b0e:	0c 0f       	add	r16, r28
     b10:	1d 1f       	adc	r17, r29
     b12:	e0 0f       	add	r30, r16
     b14:	f1 1f       	adc	r31, r17
     b16:	21 e0       	ldi	r18, 0x01	; 1
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	33 ab       	std	Z+51, r19	; 0x33
     b1c:	22 ab       	std	Z+50, r18	; 0x32
		int decrement = !(PINB & 0b00000100);
		int setButton = !(PINB & 0b00001000);
		int alarmButton = !(PINB & 0b00010000);
		int backButton = !(PINB & 0b00100000);
		if (sec<=3 & min == 0 & hour == 0){
			    for (int slot = 0; slot < 5; slot++) {
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	ee cf       	rjmp	.-36     	; 0xafe <__stack+0x1ff>
				    manual_stop[slot] = 1;// renew alarms everyday
			    }
		}
		if (alarmButton == 1 & isalarmblinking == 0 & isalarmeditingmode == 0 & AlarmBack == 0)// if there is not blinking alarm, alarm button is assigned to enter the alarm editing mode
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	62 96       	adiw	r28, 0x12	; 18
     b26:	2e ad       	ldd	r18, Y+62	; 0x3e
     b28:	3f ad       	ldd	r19, Y+63	; 0x3f
     b2a:	62 97       	sbiw	r28, 0x12	; 18
     b2c:	23 2b       	or	r18, r19
     b2e:	09 f0       	breq	.+2      	; 0xb32 <__stack+0x233>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	86 23       	and	r24, r22
     b34:	91 e0       	ldi	r25, 0x01	; 1
     b36:	60 96       	adiw	r28, 0x10	; 16
     b38:	ee ad       	ldd	r30, Y+62	; 0x3e
     b3a:	ff ad       	ldd	r31, Y+63	; 0x3f
     b3c:	60 97       	sbiw	r28, 0x10	; 16
     b3e:	ef 2b       	or	r30, r31
     b40:	09 f0       	breq	.+2      	; 0xb44 <__stack+0x245>
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	88 23       	and	r24, r24
     b46:	61 f0       	breq	.+24     	; 0xb60 <__stack+0x261>
     b48:	99 23       	and	r25, r25
     b4a:	51 f0       	breq	.+20     	; 0xb60 <__stack+0x261>
		{ 
			isalarmeditingmode = 1;
			//AlarmBack = 1;
			var = 0;
     b4c:	a8 96       	adiw	r28, 0x28	; 40
     b4e:	1f ae       	std	Y+63, r1	; 0x3f
     b50:	1e ae       	std	Y+62, r1	; 0x3e
     b52:	a8 97       	sbiw	r28, 0x28	; 40
				    manual_stop[slot] = 1;// renew alarms everyday
			    }
		}
		if (alarmButton == 1 & isalarmblinking == 0 & isalarmeditingmode == 0 & AlarmBack == 0)// if there is not blinking alarm, alarm button is assigned to enter the alarm editing mode
		{ 
			isalarmeditingmode = 1;
     b54:	01 e0       	ldi	r16, 0x01	; 1
     b56:	10 e0       	ldi	r17, 0x00	; 0
     b58:	60 96       	adiw	r28, 0x10	; 16
     b5a:	1f af       	std	Y+63, r17	; 0x3f
     b5c:	0e af       	std	Y+62, r16	; 0x3e
     b5e:	60 97       	sbiw	r28, 0x10	; 16
			//AlarmBack = 1;
			var = 0;
		}
		if (isalarmeditingmode == 1)
     b60:	60 96       	adiw	r28, 0x10	; 16
     b62:	2e ad       	ldd	r18, Y+62	; 0x3e
     b64:	3f ad       	ldd	r19, Y+63	; 0x3f
     b66:	60 97       	sbiw	r28, 0x10	; 16
     b68:	21 30       	cpi	r18, 0x01	; 1
     b6a:	31 05       	cpc	r19, r1
     b6c:	09 f0       	breq	.+2      	; 0xb70 <__stack+0x271>
     b6e:	98 c1       	rjmp	.+816    	; 0xea0 <__stack+0x5a1>
		{
			if (select_slot == 0)
     b70:	a6 96       	adiw	r28, 0x26	; 38
     b72:	8e ad       	ldd	r24, Y+62	; 0x3e
     b74:	9f ad       	ldd	r25, Y+63	; 0x3f
     b76:	a6 97       	sbiw	r28, 0x26	; 38
     b78:	89 2b       	or	r24, r25
     b7a:	09 f0       	breq	.+2      	; 0xb7e <__stack+0x27f>
     b7c:	61 c0       	rjmp	.+194    	; 0xc40 <__stack+0x341>
			{
				if (var ==0)
     b7e:	a8 96       	adiw	r28, 0x28	; 40
     b80:	ae ad       	ldd	r26, Y+62	; 0x3e
     b82:	bf ad       	ldd	r27, Y+63	; 0x3f
     b84:	a8 97       	sbiw	r28, 0x28	; 40
     b86:	ab 2b       	or	r26, r27
     b88:	91 f4       	brne	.+36     	; 0xbae <__stack+0x2af>
				{
					rtc.clear();
     b8a:	8c ec       	ldi	r24, 0xCC	; 204
     b8c:	91 e0       	ldi	r25, 0x01	; 1
     b8e:	0e 94 48 02 	call	0x490	; 0x490 <_ZN3RTC5clearEv>
					var = !var;
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	a8 96       	adiw	r28, 0x28	; 40
     b96:	ee ad       	ldd	r30, Y+62	; 0x3e
     b98:	ff ad       	ldd	r31, Y+63	; 0x3f
     b9a:	a8 97       	sbiw	r28, 0x28	; 40
     b9c:	ef 2b       	or	r30, r31
     b9e:	09 f0       	breq	.+2      	; 0xba2 <__stack+0x2a3>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	08 2f       	mov	r16, r24
     ba4:	10 e0       	ldi	r17, 0x00	; 0
     ba6:	a8 96       	adiw	r28, 0x28	; 40
     ba8:	1f af       	std	Y+63, r17	; 0x3f
     baa:	0e af       	std	Y+62, r16	; 0x3e
     bac:	a8 97       	sbiw	r28, 0x28	; 40
		    	}
				rtc.slotdisp(alarmslot);
     bae:	aa 96       	adiw	r28, 0x2a	; 42
     bb0:	6e ad       	ldd	r22, Y+62	; 0x3e
     bb2:	7f ad       	ldd	r23, Y+63	; 0x3f
     bb4:	aa 97       	sbiw	r28, 0x2a	; 42
     bb6:	8c ec       	ldi	r24, 0xCC	; 204
     bb8:	91 e0       	ldi	r25, 0x01	; 1
     bba:	0e 94 2f 04 	call	0x85e	; 0x85e <_ZN3RTC8slotdispEi>
				if(increment ==1)
     bbe:	ab 28       	or	r10, r11
     bc0:	89 f4       	brne	.+34     	; 0xbe4 <__stack+0x2e5>
				{
					alarmslot += 1;
     bc2:	aa 96       	adiw	r28, 0x2a	; 42
     bc4:	2e ad       	ldd	r18, Y+62	; 0x3e
     bc6:	3f ad       	ldd	r19, Y+63	; 0x3f
     bc8:	aa 97       	sbiw	r28, 0x2a	; 42
     bca:	2f 5f       	subi	r18, 0xFF	; 255
     bcc:	3f 4f       	sbci	r19, 0xFF	; 255
     bce:	aa 96       	adiw	r28, 0x2a	; 42
     bd0:	3f af       	std	Y+63, r19	; 0x3f
     bd2:	2e af       	std	Y+62, r18	; 0x3e
     bd4:	aa 97       	sbiw	r28, 0x2a	; 42
					if (alarmslot>4)
     bd6:	25 30       	cpi	r18, 0x05	; 5
     bd8:	31 05       	cpc	r19, r1
     bda:	24 f0       	brlt	.+8      	; 0xbe4 <__stack+0x2e5>
					{
						alarmslot = 0;
     bdc:	aa 96       	adiw	r28, 0x2a	; 42
     bde:	1f ae       	std	Y+63, r1	; 0x3f
     be0:	1e ae       	std	Y+62, r1	; 0x3e
     be2:	aa 97       	sbiw	r28, 0x2a	; 42
					}
				}
				
				if (setButton ==1)// set button to set the slot
     be4:	cd 28       	or	r12, r13
     be6:	09 f0       	breq	.+2      	; 0xbea <__stack+0x2eb>
     be8:	25 c4       	rjmp	.+2122   	; 0x1434 <__stack+0xb35>
				{
					select_slot = 1;//set the alarm slot and identify a alarm slot was selected
					alarmMin = alarm_min[alarmslot];
     bea:	aa 96       	adiw	r28, 0x2a	; 42
     bec:	ee ad       	ldd	r30, Y+62	; 0x3e
     bee:	ff ad       	ldd	r31, Y+63	; 0x3f
     bf0:	aa 97       	sbiw	r28, 0x2a	; 42
     bf2:	ee 0f       	add	r30, r30
     bf4:	ff 1f       	adc	r31, r31
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	8c 0f       	add	r24, r28
     bfc:	9d 1f       	adc	r25, r29
     bfe:	e8 0f       	add	r30, r24
     c00:	f9 1f       	adc	r31, r25
     c02:	a0 81       	ld	r26, Z
     c04:	b1 81       	ldd	r27, Z+1	; 0x01
     c06:	ae 96       	adiw	r28, 0x2e	; 46
     c08:	bf af       	std	Y+63, r27	; 0x3f
     c0a:	ae af       	std	Y+62, r26	; 0x3e
     c0c:	ae 97       	sbiw	r28, 0x2e	; 46
					alarmHour =  alarm_hour[alarmslot];
     c0e:	02 85       	ldd	r16, Z+10	; 0x0a
     c10:	13 85       	ldd	r17, Z+11	; 0x0b
     c12:	e0 96       	adiw	r28, 0x30	; 48
     c14:	1f af       	std	Y+63, r17	; 0x3f
     c16:	0e af       	std	Y+62, r16	; 0x3e
     c18:	e0 97       	sbiw	r28, 0x30	; 48
					alarmDay = alarm_date[alarmslot];
     c1a:	24 89       	ldd	r18, Z+20	; 0x14
     c1c:	35 89       	ldd	r19, Z+21	; 0x15
     c1e:	e2 96       	adiw	r28, 0x32	; 50
     c20:	3f af       	std	Y+63, r19	; 0x3f
     c22:	2e af       	std	Y+62, r18	; 0x3e
     c24:	e2 97       	sbiw	r28, 0x32	; 50
					alarmMon = alarm_mon[alarmslot];
     c26:	86 8d       	ldd	r24, Z+30	; 0x1e
     c28:	97 8d       	ldd	r25, Z+31	; 0x1f
     c2a:	e4 96       	adiw	r28, 0x34	; 52
     c2c:	9f af       	std	Y+63, r25	; 0x3f
     c2e:	8e af       	std	Y+62, r24	; 0x3e
     c30:	e4 97       	sbiw	r28, 0x34	; 52
					}
				}
				
				if (setButton ==1)// set button to set the slot
				{
					select_slot = 1;//set the alarm slot and identify a alarm slot was selected
     c32:	a1 e0       	ldi	r26, 0x01	; 1
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	a6 96       	adiw	r28, 0x26	; 38
     c38:	bf af       	std	Y+63, r27	; 0x3f
     c3a:	ae af       	std	Y+62, r26	; 0x3e
     c3c:	a6 97       	sbiw	r28, 0x26	; 38
     c3e:	fa c3       	rjmp	.+2036   	; 0x1434 <__stack+0xb35>
			}
			
			else
			{
				
				rtc.alarmdisp(alarmMin, alarmHour, alarmDay, alarmMon, alarmmode);//display alarm editing mode
     c40:	ac 96       	adiw	r28, 0x2c	; 44
     c42:	ee ac       	ldd	r14, Y+62	; 0x3e
     c44:	ff ac       	ldd	r15, Y+63	; 0x3f
     c46:	ac 97       	sbiw	r28, 0x2c	; 44
     c48:	e4 96       	adiw	r28, 0x34	; 52
     c4a:	0e ad       	ldd	r16, Y+62	; 0x3e
     c4c:	1f ad       	ldd	r17, Y+63	; 0x3f
     c4e:	e4 97       	sbiw	r28, 0x34	; 52
     c50:	e2 96       	adiw	r28, 0x32	; 50
     c52:	2e ad       	ldd	r18, Y+62	; 0x3e
     c54:	3f ad       	ldd	r19, Y+63	; 0x3f
     c56:	e2 97       	sbiw	r28, 0x32	; 50
     c58:	e0 96       	adiw	r28, 0x30	; 48
     c5a:	4e ad       	ldd	r20, Y+62	; 0x3e
     c5c:	5f ad       	ldd	r21, Y+63	; 0x3f
     c5e:	e0 97       	sbiw	r28, 0x30	; 48
     c60:	ae 96       	adiw	r28, 0x2e	; 46
     c62:	6e ad       	ldd	r22, Y+62	; 0x3e
     c64:	7f ad       	ldd	r23, Y+63	; 0x3f
     c66:	ae 97       	sbiw	r28, 0x2e	; 46
     c68:	8c ec       	ldi	r24, 0xCC	; 204
     c6a:	91 e0       	ldi	r25, 0x01	; 1
     c6c:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN3RTC9alarmdispEiiiii>
				
			
			if (modeButton ==1)// in the alarm editing mode, after selected the slot, the mode button assigned to change hour or min
     c70:	a0 96       	adiw	r28, 0x20	; 32
     c72:	ee ad       	ldd	r30, Y+62	; 0x3e
     c74:	ff ad       	ldd	r31, Y+63	; 0x3f
     c76:	a0 97       	sbiw	r28, 0x20	; 32
     c78:	ef 2b       	or	r30, r31
     c7a:	89 f4       	brne	.+34     	; 0xc9e <__stack+0x39f>
			{
				alarmmode += 1;
     c7c:	ac 96       	adiw	r28, 0x2c	; 44
     c7e:	0e ad       	ldd	r16, Y+62	; 0x3e
     c80:	1f ad       	ldd	r17, Y+63	; 0x3f
     c82:	ac 97       	sbiw	r28, 0x2c	; 44
     c84:	0f 5f       	subi	r16, 0xFF	; 255
     c86:	1f 4f       	sbci	r17, 0xFF	; 255
     c88:	ac 96       	adiw	r28, 0x2c	; 44
     c8a:	1f af       	std	Y+63, r17	; 0x3f
     c8c:	0e af       	std	Y+62, r16	; 0x3e
     c8e:	ac 97       	sbiw	r28, 0x2c	; 44
				if (alarmmode >3)
     c90:	04 30       	cpi	r16, 0x04	; 4
     c92:	11 05       	cpc	r17, r1
     c94:	24 f0       	brlt	.+8      	; 0xc9e <__stack+0x39f>
				{
					alarmmode = 0;
     c96:	ac 96       	adiw	r28, 0x2c	; 44
     c98:	1f ae       	std	Y+63, r1	; 0x3f
     c9a:	1e ae       	std	Y+62, r1	; 0x3e
     c9c:	ac 97       	sbiw	r28, 0x2c	; 44
				}
				
			}
			if (increment ==1)
     c9e:	ab 28       	or	r10, r11
     ca0:	09 f0       	breq	.+2      	; 0xca4 <__stack+0x3a5>
     ca2:	5b c0       	rjmp	.+182    	; 0xd5a <__stack+0x45b>
			{
				if (alarmmode ==0)
     ca4:	ac 96       	adiw	r28, 0x2c	; 44
     ca6:	2e ad       	ldd	r18, Y+62	; 0x3e
     ca8:	3f ad       	ldd	r19, Y+63	; 0x3f
     caa:	ac 97       	sbiw	r28, 0x2c	; 44
     cac:	23 2b       	or	r18, r19
     cae:	79 f4       	brne	.+30     	; 0xcce <__stack+0x3cf>
				{
					alarmMin += 1;
     cb0:	ae 96       	adiw	r28, 0x2e	; 46
     cb2:	8e ad       	ldd	r24, Y+62	; 0x3e
     cb4:	9f ad       	ldd	r25, Y+63	; 0x3f
     cb6:	ae 97       	sbiw	r28, 0x2e	; 46
     cb8:	01 96       	adiw	r24, 0x01	; 1
     cba:	ae 96       	adiw	r28, 0x2e	; 46
     cbc:	9f af       	std	Y+63, r25	; 0x3f
     cbe:	8e af       	std	Y+62, r24	; 0x3e
     cc0:	ae 97       	sbiw	r28, 0x2e	; 46
					if (alarmMin >59)
     cc2:	cc 97       	sbiw	r24, 0x3c	; 60
     cc4:	24 f0       	brlt	.+8      	; 0xcce <__stack+0x3cf>
					{
						alarmMin = 0;
     cc6:	ae 96       	adiw	r28, 0x2e	; 46
     cc8:	1f ae       	std	Y+63, r1	; 0x3f
     cca:	1e ae       	std	Y+62, r1	; 0x3e
     ccc:	ae 97       	sbiw	r28, 0x2e	; 46
					}
				}
				
				if (alarmmode == 1)
     cce:	ac 96       	adiw	r28, 0x2c	; 44
     cd0:	ae ad       	ldd	r26, Y+62	; 0x3e
     cd2:	bf ad       	ldd	r27, Y+63	; 0x3f
     cd4:	ac 97       	sbiw	r28, 0x2c	; 44
     cd6:	11 97       	sbiw	r26, 0x01	; 1
     cd8:	79 f4       	brne	.+30     	; 0xcf8 <__stack+0x3f9>
				{
					alarmHour += 1;
     cda:	e0 96       	adiw	r28, 0x30	; 48
     cdc:	ee ad       	ldd	r30, Y+62	; 0x3e
     cde:	ff ad       	ldd	r31, Y+63	; 0x3f
     ce0:	e0 97       	sbiw	r28, 0x30	; 48
     ce2:	31 96       	adiw	r30, 0x01	; 1
     ce4:	e0 96       	adiw	r28, 0x30	; 48
     ce6:	ff af       	std	Y+63, r31	; 0x3f
     ce8:	ee af       	std	Y+62, r30	; 0x3e
     cea:	e0 97       	sbiw	r28, 0x30	; 48
					if (alarmHour >23)
     cec:	78 97       	sbiw	r30, 0x18	; 24
     cee:	24 f0       	brlt	.+8      	; 0xcf8 <__stack+0x3f9>
					{
						alarmHour = 0;
     cf0:	e0 96       	adiw	r28, 0x30	; 48
     cf2:	1f ae       	std	Y+63, r1	; 0x3f
     cf4:	1e ae       	std	Y+62, r1	; 0x3e
     cf6:	e0 97       	sbiw	r28, 0x30	; 48
					}
				}
				
				if (alarmmode ==2)
     cf8:	ac 96       	adiw	r28, 0x2c	; 44
     cfa:	0e ad       	ldd	r16, Y+62	; 0x3e
     cfc:	1f ad       	ldd	r17, Y+63	; 0x3f
     cfe:	ac 97       	sbiw	r28, 0x2c	; 44
     d00:	02 30       	cpi	r16, 0x02	; 2
     d02:	11 05       	cpc	r17, r1
     d04:	99 f4       	brne	.+38     	; 0xd2c <__stack+0x42d>
				{
					alarmDay += 1;
     d06:	e2 96       	adiw	r28, 0x32	; 50
     d08:	2e ad       	ldd	r18, Y+62	; 0x3e
     d0a:	3f ad       	ldd	r19, Y+63	; 0x3f
     d0c:	e2 97       	sbiw	r28, 0x32	; 50
     d0e:	2f 5f       	subi	r18, 0xFF	; 255
     d10:	3f 4f       	sbci	r19, 0xFF	; 255
     d12:	e2 96       	adiw	r28, 0x32	; 50
     d14:	3f af       	std	Y+63, r19	; 0x3f
     d16:	2e af       	std	Y+62, r18	; 0x3e
     d18:	e2 97       	sbiw	r28, 0x32	; 50
					if (alarmDay >31)
     d1a:	20 32       	cpi	r18, 0x20	; 32
     d1c:	31 05       	cpc	r19, r1
     d1e:	34 f0       	brlt	.+12     	; 0xd2c <__stack+0x42d>
					{
						alarmDay = 1;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	e2 96       	adiw	r28, 0x32	; 50
     d26:	9f af       	std	Y+63, r25	; 0x3f
     d28:	8e af       	std	Y+62, r24	; 0x3e
     d2a:	e2 97       	sbiw	r28, 0x32	; 50
					}
				}
								
				if (alarmmode == 3)
     d2c:	ac 96       	adiw	r28, 0x2c	; 44
     d2e:	ae ad       	ldd	r26, Y+62	; 0x3e
     d30:	bf ad       	ldd	r27, Y+63	; 0x3f
     d32:	ac 97       	sbiw	r28, 0x2c	; 44
     d34:	13 97       	sbiw	r26, 0x03	; 3
     d36:	89 f4       	brne	.+34     	; 0xd5a <__stack+0x45b>
				{
					alarmMon += 1;
     d38:	e4 96       	adiw	r28, 0x34	; 52
     d3a:	ee ad       	ldd	r30, Y+62	; 0x3e
     d3c:	ff ad       	ldd	r31, Y+63	; 0x3f
     d3e:	e4 97       	sbiw	r28, 0x34	; 52
     d40:	31 96       	adiw	r30, 0x01	; 1
     d42:	e4 96       	adiw	r28, 0x34	; 52
     d44:	ff af       	std	Y+63, r31	; 0x3f
     d46:	ee af       	std	Y+62, r30	; 0x3e
     d48:	e4 97       	sbiw	r28, 0x34	; 52
					if (alarmMon >12)
     d4a:	3d 97       	sbiw	r30, 0x0d	; 13
     d4c:	34 f0       	brlt	.+12     	; 0xd5a <__stack+0x45b>
					{
						alarmMon = 1;
     d4e:	01 e0       	ldi	r16, 0x01	; 1
     d50:	10 e0       	ldi	r17, 0x00	; 0
     d52:	e4 96       	adiw	r28, 0x34	; 52
     d54:	1f af       	std	Y+63, r17	; 0x3f
     d56:	0e af       	std	Y+62, r16	; 0x3e
     d58:	e4 97       	sbiw	r28, 0x34	; 52
					}
				}

			}

			if (decrement ==1)
     d5a:	89 28       	or	r8, r9
     d5c:	09 f0       	breq	.+2      	; 0xd60 <__stack+0x461>
     d5e:	61 c0       	rjmp	.+194    	; 0xe22 <__stack+0x523>
			{
				if (alarmmode ==0)
     d60:	ac 96       	adiw	r28, 0x2c	; 44
     d62:	2e ad       	ldd	r18, Y+62	; 0x3e
     d64:	3f ad       	ldd	r19, Y+63	; 0x3f
     d66:	ac 97       	sbiw	r28, 0x2c	; 44
     d68:	23 2b       	or	r18, r19
     d6a:	89 f4       	brne	.+34     	; 0xd8e <__stack+0x48f>
				{
					alarmMin -= 1;
     d6c:	ae 96       	adiw	r28, 0x2e	; 46
     d6e:	8e ad       	ldd	r24, Y+62	; 0x3e
     d70:	9f ad       	ldd	r25, Y+63	; 0x3f
     d72:	ae 97       	sbiw	r28, 0x2e	; 46
     d74:	01 97       	sbiw	r24, 0x01	; 1
     d76:	ae 96       	adiw	r28, 0x2e	; 46
     d78:	9f af       	std	Y+63, r25	; 0x3f
     d7a:	8e af       	std	Y+62, r24	; 0x3e
     d7c:	ae 97       	sbiw	r28, 0x2e	; 46
					if (alarmMin <0)
     d7e:	99 23       	and	r25, r25
     d80:	34 f4       	brge	.+12     	; 0xd8e <__stack+0x48f>
					{
						alarmMin = 59;
     d82:	ab e3       	ldi	r26, 0x3B	; 59
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	ae 96       	adiw	r28, 0x2e	; 46
     d88:	bf af       	std	Y+63, r27	; 0x3f
     d8a:	ae af       	std	Y+62, r26	; 0x3e
     d8c:	ae 97       	sbiw	r28, 0x2e	; 46
					}
				}
				
				if (alarmmode == 1)
     d8e:	ac 96       	adiw	r28, 0x2c	; 44
     d90:	ee ad       	ldd	r30, Y+62	; 0x3e
     d92:	ff ad       	ldd	r31, Y+63	; 0x3f
     d94:	ac 97       	sbiw	r28, 0x2c	; 44
     d96:	31 97       	sbiw	r30, 0x01	; 1
     d98:	91 f4       	brne	.+36     	; 0xdbe <__stack+0x4bf>
				{
					alarmHour -= 1;
     d9a:	e0 96       	adiw	r28, 0x30	; 48
     d9c:	0e ad       	ldd	r16, Y+62	; 0x3e
     d9e:	1f ad       	ldd	r17, Y+63	; 0x3f
     da0:	e0 97       	sbiw	r28, 0x30	; 48
     da2:	01 50       	subi	r16, 0x01	; 1
     da4:	11 09       	sbc	r17, r1
     da6:	e0 96       	adiw	r28, 0x30	; 48
     da8:	1f af       	std	Y+63, r17	; 0x3f
     daa:	0e af       	std	Y+62, r16	; 0x3e
     dac:	e0 97       	sbiw	r28, 0x30	; 48
					if (alarmHour <0)
     dae:	11 23       	and	r17, r17
     db0:	34 f4       	brge	.+12     	; 0xdbe <__stack+0x4bf>
					{
						alarmHour = 23;
     db2:	27 e1       	ldi	r18, 0x17	; 23
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	e0 96       	adiw	r28, 0x30	; 48
     db8:	3f af       	std	Y+63, r19	; 0x3f
     dba:	2e af       	std	Y+62, r18	; 0x3e
     dbc:	e0 97       	sbiw	r28, 0x30	; 48
					}
				}
				if (alarmmode == 2)
     dbe:	ac 96       	adiw	r28, 0x2c	; 44
     dc0:	8e ad       	ldd	r24, Y+62	; 0x3e
     dc2:	9f ad       	ldd	r25, Y+63	; 0x3f
     dc4:	ac 97       	sbiw	r28, 0x2c	; 44
     dc6:	02 97       	sbiw	r24, 0x02	; 2
     dc8:	91 f4       	brne	.+36     	; 0xdee <__stack+0x4ef>
				{
					alarmDay -= 1;
     dca:	e2 96       	adiw	r28, 0x32	; 50
     dcc:	ae ad       	ldd	r26, Y+62	; 0x3e
     dce:	bf ad       	ldd	r27, Y+63	; 0x3f
     dd0:	e2 97       	sbiw	r28, 0x32	; 50
     dd2:	11 97       	sbiw	r26, 0x01	; 1
     dd4:	e2 96       	adiw	r28, 0x32	; 50
     dd6:	bf af       	std	Y+63, r27	; 0x3f
     dd8:	ae af       	std	Y+62, r26	; 0x3e
     dda:	e2 97       	sbiw	r28, 0x32	; 50
					if (alarmDay <1)
     ddc:	1a 16       	cp	r1, r26
     dde:	1b 06       	cpc	r1, r27
     de0:	34 f0       	brlt	.+12     	; 0xdee <__stack+0x4ef>
					{
						alarmDay = 31;
     de2:	ef e1       	ldi	r30, 0x1F	; 31
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	e2 96       	adiw	r28, 0x32	; 50
     de8:	ff af       	std	Y+63, r31	; 0x3f
     dea:	ee af       	std	Y+62, r30	; 0x3e
     dec:	e2 97       	sbiw	r28, 0x32	; 50
					}
				}
				
				if (alarmmode == 3)
     dee:	ac 96       	adiw	r28, 0x2c	; 44
     df0:	0e ad       	ldd	r16, Y+62	; 0x3e
     df2:	1f ad       	ldd	r17, Y+63	; 0x3f
     df4:	ac 97       	sbiw	r28, 0x2c	; 44
     df6:	03 30       	cpi	r16, 0x03	; 3
     df8:	11 05       	cpc	r17, r1
     dfa:	99 f4       	brne	.+38     	; 0xe22 <__stack+0x523>
				{
					alarmMon -= 1;
     dfc:	e4 96       	adiw	r28, 0x34	; 52
     dfe:	2e ad       	ldd	r18, Y+62	; 0x3e
     e00:	3f ad       	ldd	r19, Y+63	; 0x3f
     e02:	e4 97       	sbiw	r28, 0x34	; 52
     e04:	21 50       	subi	r18, 0x01	; 1
     e06:	31 09       	sbc	r19, r1
     e08:	e4 96       	adiw	r28, 0x34	; 52
     e0a:	3f af       	std	Y+63, r19	; 0x3f
     e0c:	2e af       	std	Y+62, r18	; 0x3e
     e0e:	e4 97       	sbiw	r28, 0x34	; 52
					if (alarmMon <1)
     e10:	12 16       	cp	r1, r18
     e12:	13 06       	cpc	r1, r19
     e14:	34 f0       	brlt	.+12     	; 0xe22 <__stack+0x523>
					{
						alarmMon = 12;
     e16:	8c e0       	ldi	r24, 0x0C	; 12
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	e4 96       	adiw	r28, 0x34	; 52
     e1c:	9f af       	std	Y+63, r25	; 0x3f
     e1e:	8e af       	std	Y+62, r24	; 0x3e
     e20:	e4 97       	sbiw	r28, 0x34	; 52
					}
				}

			}
		
			if (setButton == 1 )// if slot is selected, set button is assigned to set the current time as the alarm
     e22:	cd 28       	or	r12, r13
     e24:	09 f0       	breq	.+2      	; 0xe28 <__stack+0x529>
     e26:	06 c3       	rjmp	.+1548   	; 0x1434 <__stack+0xb35>
			{
				alarm_min[alarmslot] = alarmMin;
     e28:	aa 96       	adiw	r28, 0x2a	; 42
     e2a:	0e ad       	ldd	r16, Y+62	; 0x3e
     e2c:	1f ad       	ldd	r17, Y+63	; 0x3f
     e2e:	aa 97       	sbiw	r28, 0x2a	; 42
     e30:	00 0f       	add	r16, r16
     e32:	11 1f       	adc	r17, r17
     e34:	a1 e0       	ldi	r26, 0x01	; 1
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	ac 0f       	add	r26, r28
     e3a:	bd 1f       	adc	r27, r29
     e3c:	0a 0f       	add	r16, r26
     e3e:	1b 1f       	adc	r17, r27
     e40:	ae 96       	adiw	r28, 0x2e	; 46
     e42:	2e ad       	ldd	r18, Y+62	; 0x3e
     e44:	3f ad       	ldd	r19, Y+63	; 0x3f
     e46:	ae 97       	sbiw	r28, 0x2e	; 46
     e48:	f8 01       	movw	r30, r16
     e4a:	31 83       	std	Z+1, r19	; 0x01
     e4c:	20 83       	st	Z, r18
				alarm_hour[alarmslot] = alarmHour;
     e4e:	e0 96       	adiw	r28, 0x30	; 48
     e50:	8e ad       	ldd	r24, Y+62	; 0x3e
     e52:	9f ad       	ldd	r25, Y+63	; 0x3f
     e54:	e0 97       	sbiw	r28, 0x30	; 48
     e56:	93 87       	std	Z+11, r25	; 0x0b
     e58:	82 87       	std	Z+10, r24	; 0x0a
				alarm_date[alarmslot] = alarmDay;
     e5a:	e2 96       	adiw	r28, 0x32	; 50
     e5c:	ae ad       	ldd	r26, Y+62	; 0x3e
     e5e:	bf ad       	ldd	r27, Y+63	; 0x3f
     e60:	e2 97       	sbiw	r28, 0x32	; 50
     e62:	b5 8b       	std	Z+21, r27	; 0x15
     e64:	a4 8b       	std	Z+20, r26	; 0x14
				alarm_mon[alarmslot] = alarmMon;
     e66:	e4 96       	adiw	r28, 0x34	; 52
     e68:	2e ad       	ldd	r18, Y+62	; 0x3e
     e6a:	3f ad       	ldd	r19, Y+63	; 0x3f
     e6c:	e4 97       	sbiw	r28, 0x34	; 52
     e6e:	37 8f       	std	Z+31, r19	; 0x1f
     e70:	26 8f       	std	Z+30, r18	; 0x1e
				isalarmeditingmode = 0;
				select_slot = 0;
				init_alarm[alarmslot] = 1;
     e72:	ee 24       	eor	r14, r14
     e74:	e3 94       	inc	r14
     e76:	f1 2c       	mov	r15, r1
     e78:	f1 a6       	std	Z+41, r15	; 0x29
     e7a:	e0 a6       	std	Z+40, r14	; 0x28
				rtc.NoBlink();
     e7c:	8c ec       	ldi	r24, 0xCC	; 204
     e7e:	91 e0       	ldi	r25, 0x01	; 1
     e80:	0e 94 73 02 	call	0x4e6	; 0x4e6 <_ZN3RTC7NoBlinkEv>
				manual_stop[alarmslot] = 1;
     e84:	d8 01       	movw	r26, r16
     e86:	d3 96       	adiw	r26, 0x33	; 51
     e88:	fc 92       	st	X, r15
     e8a:	ee 92       	st	-X, r14
     e8c:	d2 97       	sbiw	r26, 0x32	; 50
				alarm_min[alarmslot] = alarmMin;
				alarm_hour[alarmslot] = alarmHour;
				alarm_date[alarmslot] = alarmDay;
				alarm_mon[alarmslot] = alarmMon;
				isalarmeditingmode = 0;
				select_slot = 0;
     e8e:	a6 96       	adiw	r28, 0x26	; 38
     e90:	1f ae       	std	Y+63, r1	; 0x3f
     e92:	1e ae       	std	Y+62, r1	; 0x3e
     e94:	a6 97       	sbiw	r28, 0x26	; 38
			{
				alarm_min[alarmslot] = alarmMin;
				alarm_hour[alarmslot] = alarmHour;
				alarm_date[alarmslot] = alarmDay;
				alarm_mon[alarmslot] = alarmMon;
				isalarmeditingmode = 0;
     e96:	60 96       	adiw	r28, 0x10	; 16
     e98:	1f ae       	std	Y+63, r1	; 0x3f
     e9a:	1e ae       	std	Y+62, r1	; 0x3e
     e9c:	60 97       	sbiw	r28, 0x10	; 16
     e9e:	ca c2       	rjmp	.+1428   	; 0x1434 <__stack+0xb35>
     ea0:	40 e0       	ldi	r20, 0x00	; 0
     ea2:	50 e0       	ldi	r21, 0x00	; 0
			}
		}
	
		}
		else{//if not selected alarm editing mode
			for (int i =0; i<5;i++){
     ea4:	45 30       	cpi	r20, 0x05	; 5
     ea6:	51 05       	cpc	r21, r1
     ea8:	0c f0       	brlt	.+2      	; 0xeac <__stack+0x5ad>
     eaa:	8a c0       	rjmp	.+276    	; 0xfc0 <__stack+0x6c1>
				if ((min1 == alarm_min[i]) & (hour1 == alarm_hour[i])  &(day1 == alarm_date[i]) & (month1 == alarm_mon[i]) & (init_alarm[i] == 1) & (manual_stop[i] == 1)){
     eac:	fa 01       	movw	r30, r20
     eae:	ee 0f       	add	r30, r30
     eb0:	ff 1f       	adc	r31, r31
     eb2:	01 e0       	ldi	r16, 0x01	; 1
     eb4:	10 e0       	ldi	r17, 0x00	; 0
     eb6:	0c 0f       	add	r16, r28
     eb8:	1d 1f       	adc	r17, r29
     eba:	e0 0f       	add	r30, r16
     ebc:	f1 1f       	adc	r31, r17
     ebe:	80 81       	ld	r24, Z
     ec0:	91 81       	ldd	r25, Z+1	; 0x01
     ec2:	02 84       	ldd	r0, Z+10	; 0x0a
     ec4:	f3 85       	ldd	r31, Z+11	; 0x0b
     ec6:	e0 2d       	mov	r30, r0
     ec8:	21 e0       	ldi	r18, 0x01	; 1
     eca:	29 96       	adiw	r28, 0x09	; 9
     ecc:	0e ad       	ldd	r16, Y+62	; 0x3e
     ece:	1f ad       	ldd	r17, Y+63	; 0x3f
     ed0:	29 97       	sbiw	r28, 0x09	; 9
     ed2:	08 17       	cp	r16, r24
     ed4:	19 07       	cpc	r17, r25
     ed6:	09 f0       	breq	.+2      	; 0xeda <__stack+0x5db>
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	27 96       	adiw	r28, 0x07	; 7
     ede:	0e ad       	ldd	r16, Y+62	; 0x3e
     ee0:	1f ad       	ldd	r17, Y+63	; 0x3f
     ee2:	27 97       	sbiw	r28, 0x07	; 7
     ee4:	0e 17       	cp	r16, r30
     ee6:	1f 07       	cpc	r17, r31
     ee8:	09 f0       	breq	.+2      	; 0xeec <__stack+0x5ed>
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	32 2f       	mov	r19, r18
     eee:	38 23       	and	r19, r24
     ef0:	fa 01       	movw	r30, r20
     ef2:	ee 0f       	add	r30, r30
     ef4:	ff 1f       	adc	r31, r31
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	8c 0f       	add	r24, r28
     efc:	9d 1f       	adc	r25, r29
     efe:	e8 0f       	add	r30, r24
     f00:	f9 1f       	adc	r31, r25
     f02:	84 89       	ldd	r24, Z+20	; 0x14
     f04:	95 89       	ldd	r25, Z+21	; 0x15
     f06:	21 e0       	ldi	r18, 0x01	; 1
     f08:	25 96       	adiw	r28, 0x05	; 5
     f0a:	ee ad       	ldd	r30, Y+62	; 0x3e
     f0c:	ff ad       	ldd	r31, Y+63	; 0x3f
     f0e:	25 97       	sbiw	r28, 0x05	; 5
     f10:	e8 17       	cp	r30, r24
     f12:	f9 07       	cpc	r31, r25
     f14:	09 f0       	breq	.+2      	; 0xf18 <__stack+0x619>
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	fa 01       	movw	r30, r20
     f1a:	ee 0f       	add	r30, r30
     f1c:	ff 1f       	adc	r31, r31
     f1e:	01 e0       	ldi	r16, 0x01	; 1
     f20:	10 e0       	ldi	r17, 0x00	; 0
     f22:	0c 0f       	add	r16, r28
     f24:	1d 1f       	adc	r17, r29
     f26:	e0 0f       	add	r30, r16
     f28:	f1 1f       	adc	r31, r17
     f2a:	06 8c       	ldd	r0, Z+30	; 0x1e
     f2c:	f7 8d       	ldd	r31, Z+31	; 0x1f
     f2e:	e0 2d       	mov	r30, r0
     f30:	91 e0       	ldi	r25, 0x01	; 1
     f32:	21 96       	adiw	r28, 0x01	; 1
     f34:	0e ad       	ldd	r16, Y+62	; 0x3e
     f36:	1f ad       	ldd	r17, Y+63	; 0x3f
     f38:	21 97       	sbiw	r28, 0x01	; 1
     f3a:	0e 17       	cp	r16, r30
     f3c:	1f 07       	cpc	r17, r31
     f3e:	09 f0       	breq	.+2      	; 0xf42 <__stack+0x643>
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	fa 01       	movw	r30, r20
     f44:	ee 0f       	add	r30, r30
     f46:	ff 1f       	adc	r31, r31
     f48:	01 e0       	ldi	r16, 0x01	; 1
     f4a:	10 e0       	ldi	r17, 0x00	; 0
     f4c:	0c 0f       	add	r16, r28
     f4e:	1d 1f       	adc	r17, r29
     f50:	e0 0f       	add	r30, r16
     f52:	f1 1f       	adc	r31, r17
     f54:	00 a4       	ldd	r0, Z+40	; 0x28
     f56:	f1 a5       	ldd	r31, Z+41	; 0x29
     f58:	e0 2d       	mov	r30, r0
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	31 97       	sbiw	r30, 0x01	; 1
     f5e:	09 f0       	breq	.+2      	; 0xf62 <__stack+0x663>
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	fa 01       	movw	r30, r20
     f64:	ee 0f       	add	r30, r30
     f66:	ff 1f       	adc	r31, r31
     f68:	01 e0       	ldi	r16, 0x01	; 1
     f6a:	10 e0       	ldi	r17, 0x00	; 0
     f6c:	0c 0f       	add	r16, r28
     f6e:	1d 1f       	adc	r17, r29
     f70:	e0 0f       	add	r30, r16
     f72:	f1 1f       	adc	r31, r17
     f74:	02 a9       	ldd	r16, Z+50	; 0x32
     f76:	13 a9       	ldd	r17, Z+51	; 0x33
     f78:	e1 e0       	ldi	r30, 0x01	; 1
     f7a:	01 30       	cpi	r16, 0x01	; 1
     f7c:	11 05       	cpc	r17, r1
     f7e:	09 f0       	breq	.+2      	; 0xf82 <__stack+0x683>
     f80:	e0 e0       	ldi	r30, 0x00	; 0
     f82:	23 23       	and	r18, r19
     f84:	92 23       	and	r25, r18
     f86:	89 23       	and	r24, r25
     f88:	c1 f0       	breq	.+48     	; 0xfba <__stack+0x6bb>
     f8a:	ee 23       	and	r30, r30
     f8c:	b1 f0       	breq	.+44     	; 0xfba <__stack+0x6bb>
					current_alarm = i;
					isalarmblinking = 1;
					PORTD = 0b00000100;
     f8e:	84 e0       	ldi	r24, 0x04	; 4
     f90:	8b b9       	out	0x0b, r24	; 11
     f92:	1f ef       	ldi	r17, 0xFF	; 255
     f94:	21 ee       	ldi	r18, 0xE1	; 225
     f96:	34 e0       	ldi	r19, 0x04	; 4
     f98:	11 50       	subi	r17, 0x01	; 1
     f9a:	20 40       	sbci	r18, 0x00	; 0
     f9c:	30 40       	sbci	r19, 0x00	; 0
     f9e:	e1 f7       	brne	.-8      	; 0xf98 <__stack+0x699>
     fa0:	00 c0       	rjmp	.+0      	; 0xfa2 <__stack+0x6a3>
     fa2:	00 00       	nop
					_delay_ms(100);
					PORTD = 0;
     fa4:	1b b8       	out	0x0b, r1	; 11
	
		}
		else{//if not selected alarm editing mode
			for (int i =0; i<5;i++){
				if ((min1 == alarm_min[i]) & (hour1 == alarm_hour[i])  &(day1 == alarm_date[i]) & (month1 == alarm_mon[i]) & (init_alarm[i] == 1) & (manual_stop[i] == 1)){
					current_alarm = i;
     fa6:	a4 96       	adiw	r28, 0x24	; 36
     fa8:	5f af       	std	Y+63, r21	; 0x3f
     faa:	4e af       	std	Y+62, r20	; 0x3e
     fac:	a4 97       	sbiw	r28, 0x24	; 36
					isalarmblinking = 1;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	62 96       	adiw	r28, 0x12	; 18
     fb4:	9f af       	std	Y+63, r25	; 0x3f
     fb6:	8e af       	std	Y+62, r24	; 0x3e
     fb8:	62 97       	sbiw	r28, 0x12	; 18
			}
		}
	
		}
		else{//if not selected alarm editing mode
			for (int i =0; i<5;i++){
     fba:	4f 5f       	subi	r20, 0xFF	; 255
     fbc:	5f 4f       	sbci	r21, 0xFF	; 255
     fbe:	72 cf       	rjmp	.-284    	; 0xea4 <__stack+0x5a5>
					_delay_ms(100);
					PORTD = 0;
					
				}
			}
			if ((alarmButton == 1) & (isalarmblinking == 1)){//manually stopping of current blinking alarm
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	62 96       	adiw	r28, 0x12	; 18
     fc4:	ee ad       	ldd	r30, Y+62	; 0x3e
     fc6:	ff ad       	ldd	r31, Y+63	; 0x3f
     fc8:	62 97       	sbiw	r28, 0x12	; 18
     fca:	31 97       	sbiw	r30, 0x01	; 1
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <__stack+0x6d1>
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	88 23       	and	r24, r24
     fd2:	f9 f0       	breq	.+62     	; 0x1012 <__stack+0x713>
     fd4:	66 23       	and	r22, r22
     fd6:	e9 f0       	breq	.+58     	; 0x1012 <__stack+0x713>
				manual_stop[current_alarm] = 0;
     fd8:	a4 96       	adiw	r28, 0x24	; 36
     fda:	ee ad       	ldd	r30, Y+62	; 0x3e
     fdc:	ff ad       	ldd	r31, Y+63	; 0x3f
     fde:	a4 97       	sbiw	r28, 0x24	; 36
     fe0:	ee 0f       	add	r30, r30
     fe2:	ff 1f       	adc	r31, r31
     fe4:	01 e0       	ldi	r16, 0x01	; 1
     fe6:	10 e0       	ldi	r17, 0x00	; 0
     fe8:	0c 0f       	add	r16, r28
     fea:	1d 1f       	adc	r17, r29
     fec:	e0 0f       	add	r30, r16
     fee:	f1 1f       	adc	r31, r17
     ff0:	13 aa       	std	Z+51, r1	; 0x33
     ff2:	12 aa       	std	Z+50, r1	; 0x32
				init_alarm[current_alarm] = 0;
     ff4:	11 a6       	std	Z+41, r1	; 0x29
     ff6:	10 a6       	std	Z+40, r1	; 0x28
     ff8:	1f ef       	ldi	r17, 0xFF	; 255
     ffa:	29 e6       	ldi	r18, 0x69	; 105
     ffc:	38 e1       	ldi	r19, 0x18	; 24
     ffe:	11 50       	subi	r17, 0x01	; 1
    1000:	20 40       	sbci	r18, 0x00	; 0
    1002:	30 40       	sbci	r19, 0x00	; 0
    1004:	e1 f7       	brne	.-8      	; 0xffe <__stack+0x6ff>
    1006:	00 c0       	rjmp	.+0      	; 0x1008 <__stack+0x709>
    1008:	00 00       	nop
				isalarmblinking = 0;
    100a:	62 96       	adiw	r28, 0x12	; 18
    100c:	1f ae       	std	Y+63, r1	; 0x3f
    100e:	1e ae       	std	Y+62, r1	; 0x3e
    1010:	62 97       	sbiw	r28, 0x12	; 18
				_delay_ms(500);
			}
							
			if (modeButton == 1 & IsEditingmode == 0){
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	41 14       	cp	r4, r1
    1016:	51 04       	cpc	r5, r1
    1018:	09 f0       	breq	.+2      	; 0x101c <__stack+0x71d>
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	88 23       	and	r24, r24
    101e:	b9 f1       	breq	.+110    	; 0x108e <__stack+0x78f>
    1020:	77 23       	and	r23, r23
    1022:	a9 f1       	breq	.+106    	; 0x108e <__stack+0x78f>
				IsEditingmode = 1;//time editing 
				sec = sec1; min = min1 ;day = day1;wday = wday1;month = month1;hour = hour1;year = year1;
    1024:	2b 96       	adiw	r28, 0x0b	; 11
    1026:	8e ad       	ldd	r24, Y+62	; 0x3e
    1028:	9f ad       	ldd	r25, Y+63	; 0x3f
    102a:	2b 97       	sbiw	r28, 0x0b	; 11
    102c:	64 96       	adiw	r28, 0x14	; 20
    102e:	9f af       	std	Y+63, r25	; 0x3f
    1030:	8e af       	std	Y+62, r24	; 0x3e
    1032:	64 97       	sbiw	r28, 0x14	; 20
    1034:	29 96       	adiw	r28, 0x09	; 9
    1036:	6e ac       	ldd	r6, Y+62	; 0x3e
    1038:	7f ac       	ldd	r7, Y+63	; 0x3f
    103a:	29 97       	sbiw	r28, 0x09	; 9
    103c:	25 96       	adiw	r28, 0x05	; 5
    103e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1040:	ff ad       	ldd	r31, Y+63	; 0x3f
    1042:	25 97       	sbiw	r28, 0x05	; 5
    1044:	66 96       	adiw	r28, 0x16	; 22
    1046:	ff af       	std	Y+63, r31	; 0x3f
    1048:	ee af       	std	Y+62, r30	; 0x3e
    104a:	66 97       	sbiw	r28, 0x16	; 22
    104c:	23 96       	adiw	r28, 0x03	; 3
    104e:	0e ad       	ldd	r16, Y+62	; 0x3e
    1050:	1f ad       	ldd	r17, Y+63	; 0x3f
    1052:	23 97       	sbiw	r28, 0x03	; 3
    1054:	68 96       	adiw	r28, 0x18	; 24
    1056:	1f af       	std	Y+63, r17	; 0x3f
    1058:	0e af       	std	Y+62, r16	; 0x3e
    105a:	68 97       	sbiw	r28, 0x18	; 24
    105c:	21 96       	adiw	r28, 0x01	; 1
    105e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1060:	3f ad       	ldd	r19, Y+63	; 0x3f
    1062:	21 97       	sbiw	r28, 0x01	; 1
    1064:	6a 96       	adiw	r28, 0x1a	; 26
    1066:	3f af       	std	Y+63, r19	; 0x3f
    1068:	2e af       	std	Y+62, r18	; 0x3e
    106a:	6a 97       	sbiw	r28, 0x1a	; 26
    106c:	27 96       	adiw	r28, 0x07	; 7
    106e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1070:	9f ad       	ldd	r25, Y+63	; 0x3f
    1072:	27 97       	sbiw	r28, 0x07	; 7
    1074:	2e 96       	adiw	r28, 0x0e	; 14
    1076:	9f af       	std	Y+63, r25	; 0x3f
    1078:	8e af       	std	Y+62, r24	; 0x3e
    107a:	2e 97       	sbiw	r28, 0x0e	; 14
    107c:	ed ad       	ldd	r30, Y+61	; 0x3d
    107e:	fe ad       	ldd	r31, Y+62	; 0x3e
    1080:	6c 96       	adiw	r28, 0x1c	; 28
    1082:	ff af       	std	Y+63, r31	; 0x3f
    1084:	ee af       	std	Y+62, r30	; 0x3e
    1086:	6c 97       	sbiw	r28, 0x1c	; 28
				isalarmblinking = 0;
				_delay_ms(500);
			}
							
			if (modeButton == 1 & IsEditingmode == 0){
				IsEditingmode = 1;//time editing 
    1088:	44 24       	eor	r4, r4
    108a:	43 94       	inc	r4
    108c:	51 2c       	mov	r5, r1
				sec = sec1; min = min1 ;day = day1;wday = wday1;month = month1;hour = hour1;year = year1;
				//_delay_ms(50);
			}
		
			if (IsEditingmode ==1 & modeButton  == 1)
    108e:	f1 e0       	ldi	r31, 0x01	; 1
    1090:	2c 96       	adiw	r28, 0x0c	; 12
    1092:	ff af       	std	Y+63, r31	; 0x3f
    1094:	2c 97       	sbiw	r28, 0x0c	; 12
    1096:	01 e0       	ldi	r16, 0x01	; 1
    1098:	40 16       	cp	r4, r16
    109a:	51 04       	cpc	r5, r1
    109c:	19 f0       	breq	.+6      	; 0x10a4 <__stack+0x7a5>
    109e:	2c 96       	adiw	r28, 0x0c	; 12
    10a0:	1f ae       	std	Y+63, r1	; 0x3f
    10a2:	2c 97       	sbiw	r28, 0x0c	; 12
    10a4:	77 23       	and	r23, r23
    10a6:	71 f0       	breq	.+28     	; 0x10c4 <__stack+0x7c5>
    10a8:	2c 96       	adiw	r28, 0x0c	; 12
    10aa:	1f ad       	ldd	r17, Y+63	; 0x3f
    10ac:	2c 97       	sbiw	r28, 0x0c	; 12
    10ae:	11 23       	and	r17, r17
    10b0:	49 f0       	breq	.+18     	; 0x10c4 <__stack+0x7c5>
			{
				modeStatus += 1;
    10b2:	2f ef       	ldi	r18, 0xFF	; 255
    10b4:	22 1a       	sub	r2, r18
    10b6:	32 0a       	sbc	r3, r18
				if (modeStatus > 4)
    10b8:	35 e0       	ldi	r19, 0x05	; 5
    10ba:	23 16       	cp	r2, r19
    10bc:	31 04       	cpc	r3, r1
    10be:	14 f0       	brlt	.+4      	; 0x10c4 <__stack+0x7c5>
				{
					modeStatus = 0;	
    10c0:	21 2c       	mov	r2, r1
    10c2:	31 2c       	mov	r3, r1
				}
			}
		
			if (increment == 1 & IsEditingmode ==1)
    10c4:	aa 23       	and	r26, r26
    10c6:	09 f4       	brne	.+2      	; 0x10ca <__stack+0x7cb>
    10c8:	93 c0       	rjmp	.+294    	; 0x11f0 <__stack+0x8f1>
    10ca:	2c 96       	adiw	r28, 0x0c	; 12
    10cc:	8f ad       	ldd	r24, Y+63	; 0x3f
    10ce:	2c 97       	sbiw	r28, 0x0c	; 12
    10d0:	88 23       	and	r24, r24
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <__stack+0x7d7>
    10d4:	8d c0       	rjmp	.+282    	; 0x11f0 <__stack+0x8f1>
			{
				if(modeStatus == 0)
    10d6:	21 14       	cp	r2, r1
    10d8:	31 04       	cpc	r3, r1
    10da:	49 f4       	brne	.+18     	; 0x10ee <__stack+0x7ef>
				{
					min += 1;
    10dc:	9f ef       	ldi	r25, 0xFF	; 255
    10de:	69 1a       	sub	r6, r25
    10e0:	79 0a       	sbc	r7, r25
					if (min >=60){
    10e2:	ac e3       	ldi	r26, 0x3C	; 60
    10e4:	6a 16       	cp	r6, r26
    10e6:	71 04       	cpc	r7, r1
    10e8:	14 f0       	brlt	.+4      	; 0x10ee <__stack+0x7ef>
						min = 0;
    10ea:	61 2c       	mov	r6, r1
    10ec:	71 2c       	mov	r7, r1
					}
				}
				if(modeStatus==1)
    10ee:	b1 e0       	ldi	r27, 0x01	; 1
    10f0:	2b 16       	cp	r2, r27
    10f2:	31 04       	cpc	r3, r1
    10f4:	79 f4       	brne	.+30     	; 0x1114 <__stack+0x815>
				{
					hour += 1;
    10f6:	2e 96       	adiw	r28, 0x0e	; 14
    10f8:	ee ad       	ldd	r30, Y+62	; 0x3e
    10fa:	ff ad       	ldd	r31, Y+63	; 0x3f
    10fc:	2e 97       	sbiw	r28, 0x0e	; 14
    10fe:	31 96       	adiw	r30, 0x01	; 1
    1100:	2e 96       	adiw	r28, 0x0e	; 14
    1102:	ff af       	std	Y+63, r31	; 0x3f
    1104:	ee af       	std	Y+62, r30	; 0x3e
    1106:	2e 97       	sbiw	r28, 0x0e	; 14
					if (hour >=24){
    1108:	78 97       	sbiw	r30, 0x18	; 24
    110a:	24 f0       	brlt	.+8      	; 0x1114 <__stack+0x815>
						hour = 0;
    110c:	2e 96       	adiw	r28, 0x0e	; 14
    110e:	1f ae       	std	Y+63, r1	; 0x3f
    1110:	1e ae       	std	Y+62, r1	; 0x3e
    1112:	2e 97       	sbiw	r28, 0x0e	; 14
					}

				}
				if(modeStatus==2)
    1114:	f2 e0       	ldi	r31, 0x02	; 2
    1116:	2f 16       	cp	r2, r31
    1118:	31 04       	cpc	r3, r1
    111a:	11 f5       	brne	.+68     	; 0x1160 <__stack+0x861>
				{
					day += 1;
    111c:	66 96       	adiw	r28, 0x16	; 22
    111e:	0e ad       	ldd	r16, Y+62	; 0x3e
    1120:	1f ad       	ldd	r17, Y+63	; 0x3f
    1122:	66 97       	sbiw	r28, 0x16	; 22
    1124:	0f 5f       	subi	r16, 0xFF	; 255
    1126:	1f 4f       	sbci	r17, 0xFF	; 255
    1128:	66 96       	adiw	r28, 0x16	; 22
    112a:	1f af       	std	Y+63, r17	; 0x3f
    112c:	0e af       	std	Y+62, r16	; 0x3e
    112e:	66 97       	sbiw	r28, 0x16	; 22
					if (day >=32){
    1130:	00 32       	cpi	r16, 0x20	; 32
    1132:	11 05       	cpc	r17, r1
    1134:	34 f0       	brlt	.+12     	; 0x1142 <__stack+0x843>
						day = 1;
    1136:	21 e0       	ldi	r18, 0x01	; 1
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	66 96       	adiw	r28, 0x16	; 22
    113c:	3f af       	std	Y+63, r19	; 0x3f
    113e:	2e af       	std	Y+62, r18	; 0x3e
    1140:	66 97       	sbiw	r28, 0x16	; 22
					}
					wday += 1;
    1142:	68 96       	adiw	r28, 0x18	; 24
    1144:	8e ad       	ldd	r24, Y+62	; 0x3e
    1146:	9f ad       	ldd	r25, Y+63	; 0x3f
    1148:	68 97       	sbiw	r28, 0x18	; 24
    114a:	01 96       	adiw	r24, 0x01	; 1
    114c:	68 96       	adiw	r28, 0x18	; 24
    114e:	9f af       	std	Y+63, r25	; 0x3f
    1150:	8e af       	std	Y+62, r24	; 0x3e
    1152:	68 97       	sbiw	r28, 0x18	; 24
					if (wday >6){
    1154:	07 97       	sbiw	r24, 0x07	; 7
    1156:	24 f0       	brlt	.+8      	; 0x1160 <__stack+0x861>
						wday = 0;
    1158:	68 96       	adiw	r28, 0x18	; 24
    115a:	1f ae       	std	Y+63, r1	; 0x3f
    115c:	1e ae       	std	Y+62, r1	; 0x3e
    115e:	68 97       	sbiw	r28, 0x18	; 24
					}

				}
				if(modeStatus==3)
    1160:	93 e0       	ldi	r25, 0x03	; 3
    1162:	29 16       	cp	r2, r25
    1164:	31 04       	cpc	r3, r1
    1166:	89 f4       	brne	.+34     	; 0x118a <__stack+0x88b>
				{
					month += 1;
    1168:	6a 96       	adiw	r28, 0x1a	; 26
    116a:	ae ad       	ldd	r26, Y+62	; 0x3e
    116c:	bf ad       	ldd	r27, Y+63	; 0x3f
    116e:	6a 97       	sbiw	r28, 0x1a	; 26
    1170:	11 96       	adiw	r26, 0x01	; 1
    1172:	6a 96       	adiw	r28, 0x1a	; 26
    1174:	bf af       	std	Y+63, r27	; 0x3f
    1176:	ae af       	std	Y+62, r26	; 0x3e
    1178:	6a 97       	sbiw	r28, 0x1a	; 26
					if (month >=13){
    117a:	1d 97       	sbiw	r26, 0x0d	; 13
    117c:	34 f0       	brlt	.+12     	; 0x118a <__stack+0x88b>
						month = 1;
    117e:	e1 e0       	ldi	r30, 0x01	; 1
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	6a 96       	adiw	r28, 0x1a	; 26
    1184:	ff af       	std	Y+63, r31	; 0x3f
    1186:	ee af       	std	Y+62, r30	; 0x3e
    1188:	6a 97       	sbiw	r28, 0x1a	; 26
					}

				}
				if(modeStatus==4)
    118a:	f4 e0       	ldi	r31, 0x04	; 4
    118c:	2f 16       	cp	r2, r31
    118e:	31 04       	cpc	r3, r1
    1190:	89 f4       	brne	.+34     	; 0x11b4 <__stack+0x8b5>
				{
					year += 1;
    1192:	6c 96       	adiw	r28, 0x1c	; 28
    1194:	0e ad       	ldd	r16, Y+62	; 0x3e
    1196:	1f ad       	ldd	r17, Y+63	; 0x3f
    1198:	6c 97       	sbiw	r28, 0x1c	; 28
    119a:	0f 5f       	subi	r16, 0xFF	; 255
    119c:	1f 4f       	sbci	r17, 0xFF	; 255
    119e:	6c 96       	adiw	r28, 0x1c	; 28
    11a0:	1f af       	std	Y+63, r17	; 0x3f
    11a2:	0e af       	std	Y+62, r16	; 0x3e
    11a4:	6c 97       	sbiw	r28, 0x1c	; 28
					if (year >99){
    11a6:	04 36       	cpi	r16, 0x64	; 100
    11a8:	11 05       	cpc	r17, r1
    11aa:	24 f0       	brlt	.+8      	; 0x11b4 <__stack+0x8b5>
						year = 0;
    11ac:	6c 96       	adiw	r28, 0x1c	; 28
    11ae:	1f ae       	std	Y+63, r1	; 0x3f
    11b0:	1e ae       	std	Y+62, r1	; 0x3e
    11b2:	6c 97       	sbiw	r28, 0x1c	; 28
					}

				}
				//rtc.setTime(sec,min,hour,day,month,wday,year);
				rtc.DisplayTimeBlink(sec, min, hour, day, wday, month,year,modeStatus);
    11b4:	41 01       	movw	r8, r2
    11b6:	6c 96       	adiw	r28, 0x1c	; 28
    11b8:	ae ac       	ldd	r10, Y+62	; 0x3e
    11ba:	bf ac       	ldd	r11, Y+63	; 0x3f
    11bc:	6c 97       	sbiw	r28, 0x1c	; 28
    11be:	6a 96       	adiw	r28, 0x1a	; 26
    11c0:	ce ac       	ldd	r12, Y+62	; 0x3e
    11c2:	df ac       	ldd	r13, Y+63	; 0x3f
    11c4:	6a 97       	sbiw	r28, 0x1a	; 26
    11c6:	68 96       	adiw	r28, 0x18	; 24
    11c8:	ee ac       	ldd	r14, Y+62	; 0x3e
    11ca:	ff ac       	ldd	r15, Y+63	; 0x3f
    11cc:	68 97       	sbiw	r28, 0x18	; 24
    11ce:	66 96       	adiw	r28, 0x16	; 22
    11d0:	0e ad       	ldd	r16, Y+62	; 0x3e
    11d2:	1f ad       	ldd	r17, Y+63	; 0x3f
    11d4:	66 97       	sbiw	r28, 0x16	; 22
    11d6:	2e 96       	adiw	r28, 0x0e	; 14
    11d8:	2e ad       	ldd	r18, Y+62	; 0x3e
    11da:	3f ad       	ldd	r19, Y+63	; 0x3f
    11dc:	2e 97       	sbiw	r28, 0x0e	; 14
    11de:	a3 01       	movw	r20, r6
    11e0:	64 96       	adiw	r28, 0x14	; 20
    11e2:	6e ad       	ldd	r22, Y+62	; 0x3e
    11e4:	7f ad       	ldd	r23, Y+63	; 0x3f
    11e6:	64 97       	sbiw	r28, 0x14	; 20
    11e8:	8c ec       	ldi	r24, 0xCC	; 204
    11ea:	91 e0       	ldi	r25, 0x01	; 1
    11ec:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN3RTC16DisplayTimeBlinkEiiiiiiii>

			}
		
			if (decrement == 1 & IsEditingmode ==1)
    11f0:	6d 96       	adiw	r28, 0x1d	; 29
    11f2:	1f ad       	ldd	r17, Y+63	; 0x3f
    11f4:	6d 97       	sbiw	r28, 0x1d	; 29
    11f6:	11 23       	and	r17, r17
    11f8:	09 f4       	brne	.+2      	; 0x11fc <__stack+0x8fd>
    11fa:	98 c0       	rjmp	.+304    	; 0x132c <__stack+0xa2d>
    11fc:	2c 96       	adiw	r28, 0x0c	; 12
    11fe:	2f ad       	ldd	r18, Y+63	; 0x3f
    1200:	2c 97       	sbiw	r28, 0x0c	; 12
    1202:	22 23       	and	r18, r18
    1204:	09 f4       	brne	.+2      	; 0x1208 <__stack+0x909>
    1206:	92 c0       	rjmp	.+292    	; 0x132c <__stack+0xa2d>
			{
				if(modeStatus == 0)
    1208:	21 14       	cp	r2, r1
    120a:	31 04       	cpc	r3, r1
    120c:	49 f4       	brne	.+18     	; 0x1220 <__stack+0x921>
				{
					min -= 1;
    120e:	31 e0       	ldi	r19, 0x01	; 1
    1210:	63 1a       	sub	r6, r19
    1212:	71 08       	sbc	r7, r1
					if (min < 0){
    1214:	2a f4       	brpl	.+10     	; 0x1220 <__stack+0x921>
						min = 59;
    1216:	0f 2e       	mov	r0, r31
    1218:	fb e3       	ldi	r31, 0x3B	; 59
    121a:	6f 2e       	mov	r6, r31
    121c:	71 2c       	mov	r7, r1
    121e:	f0 2d       	mov	r31, r0
					}
				}
				if(modeStatus==1)
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	28 16       	cp	r2, r24
    1224:	31 04       	cpc	r3, r1
    1226:	89 f4       	brne	.+34     	; 0x124a <__stack+0x94b>
				{
					hour -= 1;
    1228:	2e 96       	adiw	r28, 0x0e	; 14
    122a:	ae ad       	ldd	r26, Y+62	; 0x3e
    122c:	bf ad       	ldd	r27, Y+63	; 0x3f
    122e:	2e 97       	sbiw	r28, 0x0e	; 14
    1230:	11 97       	sbiw	r26, 0x01	; 1
    1232:	2e 96       	adiw	r28, 0x0e	; 14
    1234:	bf af       	std	Y+63, r27	; 0x3f
    1236:	ae af       	std	Y+62, r26	; 0x3e
    1238:	2e 97       	sbiw	r28, 0x0e	; 14
					if (hour <0){
    123a:	bb 23       	and	r27, r27
    123c:	34 f4       	brge	.+12     	; 0x124a <__stack+0x94b>
						hour = 23;
    123e:	e7 e1       	ldi	r30, 0x17	; 23
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	2e 96       	adiw	r28, 0x0e	; 14
    1244:	ff af       	std	Y+63, r31	; 0x3f
    1246:	ee af       	std	Y+62, r30	; 0x3e
    1248:	2e 97       	sbiw	r28, 0x0e	; 14
					}

				}
				if(modeStatus==2)
    124a:	f2 e0       	ldi	r31, 0x02	; 2
    124c:	2f 16       	cp	r2, r31
    124e:	31 04       	cpc	r3, r1
    1250:	21 f5       	brne	.+72     	; 0x129a <__stack+0x99b>
				{
					day -= 1;
    1252:	66 96       	adiw	r28, 0x16	; 22
    1254:	0e ad       	ldd	r16, Y+62	; 0x3e
    1256:	1f ad       	ldd	r17, Y+63	; 0x3f
    1258:	66 97       	sbiw	r28, 0x16	; 22
    125a:	01 50       	subi	r16, 0x01	; 1
    125c:	11 09       	sbc	r17, r1
    125e:	66 96       	adiw	r28, 0x16	; 22
    1260:	1f af       	std	Y+63, r17	; 0x3f
    1262:	0e af       	std	Y+62, r16	; 0x3e
    1264:	66 97       	sbiw	r28, 0x16	; 22
					if (day < 1){
    1266:	10 16       	cp	r1, r16
    1268:	11 06       	cpc	r1, r17
    126a:	34 f0       	brlt	.+12     	; 0x1278 <__stack+0x979>
						day = 31;
    126c:	2f e1       	ldi	r18, 0x1F	; 31
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	66 96       	adiw	r28, 0x16	; 22
    1272:	3f af       	std	Y+63, r19	; 0x3f
    1274:	2e af       	std	Y+62, r18	; 0x3e
    1276:	66 97       	sbiw	r28, 0x16	; 22
					}
					wday -= 1;
    1278:	68 96       	adiw	r28, 0x18	; 24
    127a:	8e ad       	ldd	r24, Y+62	; 0x3e
    127c:	9f ad       	ldd	r25, Y+63	; 0x3f
    127e:	68 97       	sbiw	r28, 0x18	; 24
    1280:	01 97       	sbiw	r24, 0x01	; 1
    1282:	68 96       	adiw	r28, 0x18	; 24
    1284:	9f af       	std	Y+63, r25	; 0x3f
    1286:	8e af       	std	Y+62, r24	; 0x3e
    1288:	68 97       	sbiw	r28, 0x18	; 24
					if (wday <0){
    128a:	99 23       	and	r25, r25
    128c:	34 f4       	brge	.+12     	; 0x129a <__stack+0x99b>
						wday = 6;
    128e:	a6 e0       	ldi	r26, 0x06	; 6
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	68 96       	adiw	r28, 0x18	; 24
    1294:	bf af       	std	Y+63, r27	; 0x3f
    1296:	ae af       	std	Y+62, r26	; 0x3e
    1298:	68 97       	sbiw	r28, 0x18	; 24
					}

				}
				if(modeStatus==3)
    129a:	b3 e0       	ldi	r27, 0x03	; 3
    129c:	2b 16       	cp	r2, r27
    129e:	31 04       	cpc	r3, r1
    12a0:	89 f4       	brne	.+34     	; 0x12c4 <__stack+0x9c5>
				{
					month -= 1;
    12a2:	6a 96       	adiw	r28, 0x1a	; 26
    12a4:	ee ad       	ldd	r30, Y+62	; 0x3e
    12a6:	ff ad       	ldd	r31, Y+63	; 0x3f
    12a8:	6a 97       	sbiw	r28, 0x1a	; 26
    12aa:	31 97       	sbiw	r30, 0x01	; 1
    12ac:	6a 96       	adiw	r28, 0x1a	; 26
    12ae:	ff af       	std	Y+63, r31	; 0x3f
    12b0:	ee af       	std	Y+62, r30	; 0x3e
    12b2:	6a 97       	sbiw	r28, 0x1a	; 26
					if (month <0){
    12b4:	ff 23       	and	r31, r31
    12b6:	34 f4       	brge	.+12     	; 0x12c4 <__stack+0x9c5>
						month = 12;
    12b8:	0c e0       	ldi	r16, 0x0C	; 12
    12ba:	10 e0       	ldi	r17, 0x00	; 0
    12bc:	6a 96       	adiw	r28, 0x1a	; 26
    12be:	1f af       	std	Y+63, r17	; 0x3f
    12c0:	0e af       	std	Y+62, r16	; 0x3e
    12c2:	6a 97       	sbiw	r28, 0x1a	; 26
					}

				}
				if(modeStatus==4)
    12c4:	14 e0       	ldi	r17, 0x04	; 4
    12c6:	21 16       	cp	r2, r17
    12c8:	31 04       	cpc	r3, r1
    12ca:	91 f4       	brne	.+36     	; 0x12f0 <__stack+0x9f1>
				{
					year -= 1;
    12cc:	6c 96       	adiw	r28, 0x1c	; 28
    12ce:	2e ad       	ldd	r18, Y+62	; 0x3e
    12d0:	3f ad       	ldd	r19, Y+63	; 0x3f
    12d2:	6c 97       	sbiw	r28, 0x1c	; 28
    12d4:	21 50       	subi	r18, 0x01	; 1
    12d6:	31 09       	sbc	r19, r1
    12d8:	6c 96       	adiw	r28, 0x1c	; 28
    12da:	3f af       	std	Y+63, r19	; 0x3f
    12dc:	2e af       	std	Y+62, r18	; 0x3e
    12de:	6c 97       	sbiw	r28, 0x1c	; 28
				
					if (year < 0){
    12e0:	33 23       	and	r19, r19
    12e2:	34 f4       	brge	.+12     	; 0x12f0 <__stack+0x9f1>
						year = 99;
    12e4:	83 e6       	ldi	r24, 0x63	; 99
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	6c 96       	adiw	r28, 0x1c	; 28
    12ea:	9f af       	std	Y+63, r25	; 0x3f
    12ec:	8e af       	std	Y+62, r24	; 0x3e
    12ee:	6c 97       	sbiw	r28, 0x1c	; 28
					}
							
				}
				//rtc.setTime(sec,min,hour,day,month,wday,year);
				rtc.DisplayTimeBlink(sec, min, hour, day, wday, month,year,modeStatus);
    12f0:	41 01       	movw	r8, r2
    12f2:	6c 96       	adiw	r28, 0x1c	; 28
    12f4:	ae ac       	ldd	r10, Y+62	; 0x3e
    12f6:	bf ac       	ldd	r11, Y+63	; 0x3f
    12f8:	6c 97       	sbiw	r28, 0x1c	; 28
    12fa:	6a 96       	adiw	r28, 0x1a	; 26
    12fc:	ce ac       	ldd	r12, Y+62	; 0x3e
    12fe:	df ac       	ldd	r13, Y+63	; 0x3f
    1300:	6a 97       	sbiw	r28, 0x1a	; 26
    1302:	68 96       	adiw	r28, 0x18	; 24
    1304:	ee ac       	ldd	r14, Y+62	; 0x3e
    1306:	ff ac       	ldd	r15, Y+63	; 0x3f
    1308:	68 97       	sbiw	r28, 0x18	; 24
    130a:	66 96       	adiw	r28, 0x16	; 22
    130c:	0e ad       	ldd	r16, Y+62	; 0x3e
    130e:	1f ad       	ldd	r17, Y+63	; 0x3f
    1310:	66 97       	sbiw	r28, 0x16	; 22
    1312:	2e 96       	adiw	r28, 0x0e	; 14
    1314:	2e ad       	ldd	r18, Y+62	; 0x3e
    1316:	3f ad       	ldd	r19, Y+63	; 0x3f
    1318:	2e 97       	sbiw	r28, 0x0e	; 14
    131a:	a3 01       	movw	r20, r6
    131c:	64 96       	adiw	r28, 0x14	; 20
    131e:	6e ad       	ldd	r22, Y+62	; 0x3e
    1320:	7f ad       	ldd	r23, Y+63	; 0x3f
    1322:	64 97       	sbiw	r28, 0x14	; 20
    1324:	8c ec       	ldi	r24, 0xCC	; 204
    1326:	91 e0       	ldi	r25, 0x01	; 1
    1328:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN3RTC16DisplayTimeBlinkEiiiiiiii>

			}
		
			if (setButton ==1 & IsEditingmode ==1)//if on time editing mode, set button is assigned to set the time
    132c:	6e 96       	adiw	r28, 0x1e	; 30
    132e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1330:	6e 97       	sbiw	r28, 0x1e	; 30
    1332:	99 23       	and	r25, r25
    1334:	31 f1       	breq	.+76     	; 0x1382 <__stack+0xa83>
    1336:	2c 96       	adiw	r28, 0x0c	; 12
    1338:	af ad       	ldd	r26, Y+63	; 0x3f
    133a:	2c 97       	sbiw	r28, 0x0c	; 12
    133c:	aa 23       	and	r26, r26
    133e:	09 f1       	breq	.+66     	; 0x1382 <__stack+0xa83>
			{
			
				rtc.setTime(0,min,hour,day,month,wday,year);
    1340:	6c 96       	adiw	r28, 0x1c	; 28
    1342:	ae ac       	ldd	r10, Y+62	; 0x3e
    1344:	bf ac       	ldd	r11, Y+63	; 0x3f
    1346:	6c 97       	sbiw	r28, 0x1c	; 28
    1348:	68 96       	adiw	r28, 0x18	; 24
    134a:	ce ac       	ldd	r12, Y+62	; 0x3e
    134c:	df ac       	ldd	r13, Y+63	; 0x3f
    134e:	68 97       	sbiw	r28, 0x18	; 24
    1350:	6a 96       	adiw	r28, 0x1a	; 26
    1352:	ee ac       	ldd	r14, Y+62	; 0x3e
    1354:	ff ac       	ldd	r15, Y+63	; 0x3f
    1356:	6a 97       	sbiw	r28, 0x1a	; 26
    1358:	66 96       	adiw	r28, 0x16	; 22
    135a:	0e ad       	ldd	r16, Y+62	; 0x3e
    135c:	1f ad       	ldd	r17, Y+63	; 0x3f
    135e:	66 97       	sbiw	r28, 0x16	; 22
    1360:	2e 96       	adiw	r28, 0x0e	; 14
    1362:	2e ad       	ldd	r18, Y+62	; 0x3e
    1364:	3f ad       	ldd	r19, Y+63	; 0x3f
    1366:	2e 97       	sbiw	r28, 0x0e	; 14
    1368:	a3 01       	movw	r20, r6
    136a:	60 e0       	ldi	r22, 0x00	; 0
    136c:	70 e0       	ldi	r23, 0x00	; 0
    136e:	8c ec       	ldi	r24, 0xCC	; 204
    1370:	91 e0       	ldi	r25, 0x01	; 1
    1372:	0e 94 c8 00 	call	0x190	; 0x190 <_ZN3RTC7setTimeEiiiiiii>
				
				IsEditingmode = 0;
				//mode = 0;
				rtc.NoBlink();
    1376:	8c ec       	ldi	r24, 0xCC	; 204
    1378:	91 e0       	ldi	r25, 0x01	; 1
    137a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <_ZN3RTC7NoBlinkEv>
			if (setButton ==1 & IsEditingmode ==1)//if on time editing mode, set button is assigned to set the time
			{
			
				rtc.setTime(0,min,hour,day,month,wday,year);
				
				IsEditingmode = 0;
    137e:	41 2c       	mov	r4, r1
    1380:	51 2c       	mov	r5, r1
				//mode = 0;
				rtc.NoBlink();
			}
			if (IsEditingmode == 0)
    1382:	41 14       	cp	r4, r1
    1384:	51 04       	cpc	r5, r1
    1386:	c1 f5       	brne	.+112    	; 0x13f8 <__stack+0xaf9>
			{
				rtc.ReadTime(&sec1,&min1,&hour1,&day1,&wday1,&month1,&year1);
    1388:	fe 01       	movw	r30, r28
    138a:	fd 96       	adiw	r30, 0x3d	; 61
    138c:	5f 01       	movw	r10, r30
    138e:	8e 01       	movw	r16, r28
    1390:	01 5c       	subi	r16, 0xC1	; 193
    1392:	1f 4f       	sbci	r17, 0xFF	; 255
    1394:	68 01       	movw	r12, r16
    1396:	9e 01       	movw	r18, r28
    1398:	2f 5b       	subi	r18, 0xBF	; 191
    139a:	3f 4f       	sbci	r19, 0xFF	; 255
    139c:	79 01       	movw	r14, r18
    139e:	0c 5f       	subi	r16, 0xFC	; 252
    13a0:	1f 4f       	sbci	r17, 0xFF	; 255
    13a2:	2c 5f       	subi	r18, 0xFC	; 252
    13a4:	3f 4f       	sbci	r19, 0xFF	; 255
    13a6:	ae 01       	movw	r20, r28
    13a8:	49 5b       	subi	r20, 0xB9	; 185
    13aa:	5f 4f       	sbci	r21, 0xFF	; 255
    13ac:	be 01       	movw	r22, r28
    13ae:	67 5b       	subi	r22, 0xB7	; 183
    13b0:	7f 4f       	sbci	r23, 0xFF	; 255
    13b2:	8c ec       	ldi	r24, 0xCC	; 204
    13b4:	91 e0       	ldi	r25, 0x01	; 1
    13b6:	0e 94 24 01 	call	0x248	; 0x248 <_ZN3RTC8ReadTimeEPiS0_S0_S0_S0_S0_S0_>
				rtc.DisplayTime(sec1, min1, hour1, day1, wday1, month1,year1);
    13ba:	ad ac       	ldd	r10, Y+61	; 0x3d
    13bc:	be ac       	ldd	r11, Y+62	; 0x3e
    13be:	21 96       	adiw	r28, 0x01	; 1
    13c0:	ce ac       	ldd	r12, Y+62	; 0x3e
    13c2:	df ac       	ldd	r13, Y+63	; 0x3f
    13c4:	21 97       	sbiw	r28, 0x01	; 1
    13c6:	23 96       	adiw	r28, 0x03	; 3
    13c8:	ee ac       	ldd	r14, Y+62	; 0x3e
    13ca:	ff ac       	ldd	r15, Y+63	; 0x3f
    13cc:	23 97       	sbiw	r28, 0x03	; 3
    13ce:	25 96       	adiw	r28, 0x05	; 5
    13d0:	0e ad       	ldd	r16, Y+62	; 0x3e
    13d2:	1f ad       	ldd	r17, Y+63	; 0x3f
    13d4:	25 97       	sbiw	r28, 0x05	; 5
    13d6:	27 96       	adiw	r28, 0x07	; 7
    13d8:	2e ad       	ldd	r18, Y+62	; 0x3e
    13da:	3f ad       	ldd	r19, Y+63	; 0x3f
    13dc:	27 97       	sbiw	r28, 0x07	; 7
    13de:	29 96       	adiw	r28, 0x09	; 9
    13e0:	4e ad       	ldd	r20, Y+62	; 0x3e
    13e2:	5f ad       	ldd	r21, Y+63	; 0x3f
    13e4:	29 97       	sbiw	r28, 0x09	; 9
    13e6:	2b 96       	adiw	r28, 0x0b	; 11
    13e8:	6e ad       	ldd	r22, Y+62	; 0x3e
    13ea:	7f ad       	ldd	r23, Y+63	; 0x3f
    13ec:	2b 97       	sbiw	r28, 0x0b	; 11
    13ee:	8c ec       	ldi	r24, 0xCC	; 204
    13f0:	91 e0       	ldi	r25, 0x01	; 1
    13f2:	0e 94 77 02 	call	0x4ee	; 0x4ee <_ZN3RTC11DisplayTimeEiiiiiii>
    13f6:	1e c0       	rjmp	.+60     	; 0x1434 <__stack+0xb35>
			}
			else{
				rtc.DisplayTimeBlink(sec, min, hour, day, wday, month,year,modeStatus);
    13f8:	41 01       	movw	r8, r2
    13fa:	6c 96       	adiw	r28, 0x1c	; 28
    13fc:	ae ac       	ldd	r10, Y+62	; 0x3e
    13fe:	bf ac       	ldd	r11, Y+63	; 0x3f
    1400:	6c 97       	sbiw	r28, 0x1c	; 28
    1402:	6a 96       	adiw	r28, 0x1a	; 26
    1404:	ce ac       	ldd	r12, Y+62	; 0x3e
    1406:	df ac       	ldd	r13, Y+63	; 0x3f
    1408:	6a 97       	sbiw	r28, 0x1a	; 26
    140a:	68 96       	adiw	r28, 0x18	; 24
    140c:	ee ac       	ldd	r14, Y+62	; 0x3e
    140e:	ff ac       	ldd	r15, Y+63	; 0x3f
    1410:	68 97       	sbiw	r28, 0x18	; 24
    1412:	66 96       	adiw	r28, 0x16	; 22
    1414:	0e ad       	ldd	r16, Y+62	; 0x3e
    1416:	1f ad       	ldd	r17, Y+63	; 0x3f
    1418:	66 97       	sbiw	r28, 0x16	; 22
    141a:	2e 96       	adiw	r28, 0x0e	; 14
    141c:	2e ad       	ldd	r18, Y+62	; 0x3e
    141e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1420:	2e 97       	sbiw	r28, 0x0e	; 14
    1422:	a3 01       	movw	r20, r6
    1424:	64 96       	adiw	r28, 0x14	; 20
    1426:	6e ad       	ldd	r22, Y+62	; 0x3e
    1428:	7f ad       	ldd	r23, Y+63	; 0x3f
    142a:	64 97       	sbiw	r28, 0x14	; 20
    142c:	8c ec       	ldi	r24, 0xCC	; 204
    142e:	91 e0       	ldi	r25, 0x01	; 1
    1430:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN3RTC16DisplayTimeBlinkEiiiiiiii>
			}
		
			
		}
		
		if (backButton == 1)
    1434:	a2 96       	adiw	r28, 0x22	; 34
    1436:	8e ad       	ldd	r24, Y+62	; 0x3e
    1438:	9f ad       	ldd	r25, Y+63	; 0x3f
    143a:	a2 97       	sbiw	r28, 0x22	; 34
    143c:	89 2b       	or	r24, r25
    143e:	51 f4       	brne	.+20     	; 0x1454 <__stack+0xb55>
		{
			IsEditingmode = 0;
			isalarmeditingmode = 0;
			select_slot = 0;
    1440:	a6 96       	adiw	r28, 0x26	; 38
    1442:	1f ae       	std	Y+63, r1	; 0x3f
    1444:	1e ae       	std	Y+62, r1	; 0x3e
    1446:	a6 97       	sbiw	r28, 0x26	; 38
		}
		
		if (backButton == 1)
		{
			IsEditingmode = 0;
			isalarmeditingmode = 0;
    1448:	60 96       	adiw	r28, 0x10	; 16
    144a:	1f ae       	std	Y+63, r1	; 0x3f
    144c:	1e ae       	std	Y+62, r1	; 0x3e
    144e:	60 97       	sbiw	r28, 0x10	; 16
			
		}
		
		if (backButton == 1)
		{
			IsEditingmode = 0;
    1450:	41 2c       	mov	r4, r1
    1452:	51 2c       	mov	r5, r1
    1454:	9f ef       	ldi	r25, 0xFF	; 255
    1456:	a3 ec       	ldi	r26, 0xC3	; 195
    1458:	b9 e0       	ldi	r27, 0x09	; 9
    145a:	91 50       	subi	r25, 0x01	; 1
    145c:	a0 40       	sbci	r26, 0x00	; 0
    145e:	b0 40       	sbci	r27, 0x00	; 0
    1460:	e1 f7       	brne	.-8      	; 0x145a <__stack+0xb5b>
    1462:	00 c0       	rjmp	.+0      	; 0x1464 <__stack+0xb65>
    1464:	00 00       	nop
	int AlarmBack = 0;	


	
	
	while (1)
    1466:	ce ca       	rjmp	.-2660   	; 0xa04 <__stack+0x105>

00001468 <_GLOBAL__sub_I_rtc>:
		
		_delay_ms(200);
	}
	
	
    1468:	6f ef       	ldi	r22, 0xFF	; 255
    146a:	7f ef       	ldi	r23, 0xFF	; 255
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	0e 94 72 04 	call	0x8e4	; 0x8e4 <_Z41__static_initialization_and_destruction_0ii>
    1474:	08 95       	ret

00001476 <__tablejump2__>:
    1476:	ee 0f       	add	r30, r30
    1478:	ff 1f       	adc	r31, r31
    147a:	05 90       	lpm	r0, Z+
    147c:	f4 91       	lpm	r31, Z
    147e:	e0 2d       	mov	r30, r0
    1480:	09 94       	ijmp

00001482 <sprintf>:
    1482:	ae e0       	ldi	r26, 0x0E	; 14
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e7 e4       	ldi	r30, 0x47	; 71
    1488:	fa e0       	ldi	r31, 0x0A	; 10
    148a:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__prologue_saves__+0x1c>
    148e:	0d 89       	ldd	r16, Y+21	; 0x15
    1490:	1e 89       	ldd	r17, Y+22	; 0x16
    1492:	86 e0       	ldi	r24, 0x06	; 6
    1494:	8c 83       	std	Y+4, r24	; 0x04
    1496:	1a 83       	std	Y+2, r17	; 0x02
    1498:	09 83       	std	Y+1, r16	; 0x01
    149a:	8f ef       	ldi	r24, 0xFF	; 255
    149c:	9f e7       	ldi	r25, 0x7F	; 127
    149e:	9e 83       	std	Y+6, r25	; 0x06
    14a0:	8d 83       	std	Y+5, r24	; 0x05
    14a2:	ae 01       	movw	r20, r28
    14a4:	47 5e       	subi	r20, 0xE7	; 231
    14a6:	5f 4f       	sbci	r21, 0xFF	; 255
    14a8:	6f 89       	ldd	r22, Y+23	; 0x17
    14aa:	78 8d       	ldd	r23, Y+24	; 0x18
    14ac:	ce 01       	movw	r24, r28
    14ae:	01 96       	adiw	r24, 0x01	; 1
    14b0:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <vfprintf>
    14b4:	ef 81       	ldd	r30, Y+7	; 0x07
    14b6:	f8 85       	ldd	r31, Y+8	; 0x08
    14b8:	e0 0f       	add	r30, r16
    14ba:	f1 1f       	adc	r31, r17
    14bc:	10 82       	st	Z, r1
    14be:	2e 96       	adiw	r28, 0x0e	; 14
    14c0:	e4 e0       	ldi	r30, 0x04	; 4
    14c2:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <__epilogue_restores__+0x1c>

000014c6 <vfprintf>:
    14c6:	ab e0       	ldi	r26, 0x0B	; 11
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e9 e6       	ldi	r30, 0x69	; 105
    14cc:	fa e0       	ldi	r31, 0x0A	; 10
    14ce:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <__prologue_saves__>
    14d2:	6c 01       	movw	r12, r24
    14d4:	7b 01       	movw	r14, r22
    14d6:	8a 01       	movw	r16, r20
    14d8:	fc 01       	movw	r30, r24
    14da:	17 82       	std	Z+7, r1	; 0x07
    14dc:	16 82       	std	Z+6, r1	; 0x06
    14de:	83 81       	ldd	r24, Z+3	; 0x03
    14e0:	81 ff       	sbrs	r24, 1
    14e2:	cc c1       	rjmp	.+920    	; 0x187c <vfprintf+0x3b6>
    14e4:	ce 01       	movw	r24, r28
    14e6:	01 96       	adiw	r24, 0x01	; 1
    14e8:	3c 01       	movw	r6, r24
    14ea:	f6 01       	movw	r30, r12
    14ec:	93 81       	ldd	r25, Z+3	; 0x03
    14ee:	f7 01       	movw	r30, r14
    14f0:	93 fd       	sbrc	r25, 3
    14f2:	85 91       	lpm	r24, Z+
    14f4:	93 ff       	sbrs	r25, 3
    14f6:	81 91       	ld	r24, Z+
    14f8:	7f 01       	movw	r14, r30
    14fa:	88 23       	and	r24, r24
    14fc:	09 f4       	brne	.+2      	; 0x1500 <vfprintf+0x3a>
    14fe:	ba c1       	rjmp	.+884    	; 0x1874 <vfprintf+0x3ae>
    1500:	85 32       	cpi	r24, 0x25	; 37
    1502:	39 f4       	brne	.+14     	; 0x1512 <vfprintf+0x4c>
    1504:	93 fd       	sbrc	r25, 3
    1506:	85 91       	lpm	r24, Z+
    1508:	93 ff       	sbrs	r25, 3
    150a:	81 91       	ld	r24, Z+
    150c:	7f 01       	movw	r14, r30
    150e:	85 32       	cpi	r24, 0x25	; 37
    1510:	29 f4       	brne	.+10     	; 0x151c <vfprintf+0x56>
    1512:	b6 01       	movw	r22, r12
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <fputc>
    151a:	e7 cf       	rjmp	.-50     	; 0x14ea <vfprintf+0x24>
    151c:	91 2c       	mov	r9, r1
    151e:	21 2c       	mov	r2, r1
    1520:	31 2c       	mov	r3, r1
    1522:	ff e1       	ldi	r31, 0x1F	; 31
    1524:	f3 15       	cp	r31, r3
    1526:	d8 f0       	brcs	.+54     	; 0x155e <vfprintf+0x98>
    1528:	8b 32       	cpi	r24, 0x2B	; 43
    152a:	79 f0       	breq	.+30     	; 0x154a <vfprintf+0x84>
    152c:	38 f4       	brcc	.+14     	; 0x153c <vfprintf+0x76>
    152e:	80 32       	cpi	r24, 0x20	; 32
    1530:	79 f0       	breq	.+30     	; 0x1550 <vfprintf+0x8a>
    1532:	83 32       	cpi	r24, 0x23	; 35
    1534:	a1 f4       	brne	.+40     	; 0x155e <vfprintf+0x98>
    1536:	23 2d       	mov	r18, r3
    1538:	20 61       	ori	r18, 0x10	; 16
    153a:	1d c0       	rjmp	.+58     	; 0x1576 <vfprintf+0xb0>
    153c:	8d 32       	cpi	r24, 0x2D	; 45
    153e:	61 f0       	breq	.+24     	; 0x1558 <vfprintf+0x92>
    1540:	80 33       	cpi	r24, 0x30	; 48
    1542:	69 f4       	brne	.+26     	; 0x155e <vfprintf+0x98>
    1544:	23 2d       	mov	r18, r3
    1546:	21 60       	ori	r18, 0x01	; 1
    1548:	16 c0       	rjmp	.+44     	; 0x1576 <vfprintf+0xb0>
    154a:	83 2d       	mov	r24, r3
    154c:	82 60       	ori	r24, 0x02	; 2
    154e:	38 2e       	mov	r3, r24
    1550:	e3 2d       	mov	r30, r3
    1552:	e4 60       	ori	r30, 0x04	; 4
    1554:	3e 2e       	mov	r3, r30
    1556:	2a c0       	rjmp	.+84     	; 0x15ac <vfprintf+0xe6>
    1558:	f3 2d       	mov	r31, r3
    155a:	f8 60       	ori	r31, 0x08	; 8
    155c:	1d c0       	rjmp	.+58     	; 0x1598 <vfprintf+0xd2>
    155e:	37 fc       	sbrc	r3, 7
    1560:	2d c0       	rjmp	.+90     	; 0x15bc <vfprintf+0xf6>
    1562:	20 ed       	ldi	r18, 0xD0	; 208
    1564:	28 0f       	add	r18, r24
    1566:	2a 30       	cpi	r18, 0x0A	; 10
    1568:	40 f0       	brcs	.+16     	; 0x157a <vfprintf+0xb4>
    156a:	8e 32       	cpi	r24, 0x2E	; 46
    156c:	b9 f4       	brne	.+46     	; 0x159c <vfprintf+0xd6>
    156e:	36 fc       	sbrc	r3, 6
    1570:	81 c1       	rjmp	.+770    	; 0x1874 <vfprintf+0x3ae>
    1572:	23 2d       	mov	r18, r3
    1574:	20 64       	ori	r18, 0x40	; 64
    1576:	32 2e       	mov	r3, r18
    1578:	19 c0       	rjmp	.+50     	; 0x15ac <vfprintf+0xe6>
    157a:	36 fe       	sbrs	r3, 6
    157c:	06 c0       	rjmp	.+12     	; 0x158a <vfprintf+0xc4>
    157e:	8a e0       	ldi	r24, 0x0A	; 10
    1580:	98 9e       	mul	r9, r24
    1582:	20 0d       	add	r18, r0
    1584:	11 24       	eor	r1, r1
    1586:	92 2e       	mov	r9, r18
    1588:	11 c0       	rjmp	.+34     	; 0x15ac <vfprintf+0xe6>
    158a:	ea e0       	ldi	r30, 0x0A	; 10
    158c:	2e 9e       	mul	r2, r30
    158e:	20 0d       	add	r18, r0
    1590:	11 24       	eor	r1, r1
    1592:	22 2e       	mov	r2, r18
    1594:	f3 2d       	mov	r31, r3
    1596:	f0 62       	ori	r31, 0x20	; 32
    1598:	3f 2e       	mov	r3, r31
    159a:	08 c0       	rjmp	.+16     	; 0x15ac <vfprintf+0xe6>
    159c:	8c 36       	cpi	r24, 0x6C	; 108
    159e:	21 f4       	brne	.+8      	; 0x15a8 <vfprintf+0xe2>
    15a0:	83 2d       	mov	r24, r3
    15a2:	80 68       	ori	r24, 0x80	; 128
    15a4:	38 2e       	mov	r3, r24
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <vfprintf+0xe6>
    15a8:	88 36       	cpi	r24, 0x68	; 104
    15aa:	41 f4       	brne	.+16     	; 0x15bc <vfprintf+0xf6>
    15ac:	f7 01       	movw	r30, r14
    15ae:	93 fd       	sbrc	r25, 3
    15b0:	85 91       	lpm	r24, Z+
    15b2:	93 ff       	sbrs	r25, 3
    15b4:	81 91       	ld	r24, Z+
    15b6:	7f 01       	movw	r14, r30
    15b8:	81 11       	cpse	r24, r1
    15ba:	b3 cf       	rjmp	.-154    	; 0x1522 <vfprintf+0x5c>
    15bc:	98 2f       	mov	r25, r24
    15be:	9f 7d       	andi	r25, 0xDF	; 223
    15c0:	95 54       	subi	r25, 0x45	; 69
    15c2:	93 30       	cpi	r25, 0x03	; 3
    15c4:	28 f4       	brcc	.+10     	; 0x15d0 <vfprintf+0x10a>
    15c6:	0c 5f       	subi	r16, 0xFC	; 252
    15c8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ca:	9f e3       	ldi	r25, 0x3F	; 63
    15cc:	99 83       	std	Y+1, r25	; 0x01
    15ce:	0d c0       	rjmp	.+26     	; 0x15ea <vfprintf+0x124>
    15d0:	83 36       	cpi	r24, 0x63	; 99
    15d2:	31 f0       	breq	.+12     	; 0x15e0 <vfprintf+0x11a>
    15d4:	83 37       	cpi	r24, 0x73	; 115
    15d6:	71 f0       	breq	.+28     	; 0x15f4 <vfprintf+0x12e>
    15d8:	83 35       	cpi	r24, 0x53	; 83
    15da:	09 f0       	breq	.+2      	; 0x15de <vfprintf+0x118>
    15dc:	59 c0       	rjmp	.+178    	; 0x1690 <vfprintf+0x1ca>
    15de:	21 c0       	rjmp	.+66     	; 0x1622 <vfprintf+0x15c>
    15e0:	f8 01       	movw	r30, r16
    15e2:	80 81       	ld	r24, Z
    15e4:	89 83       	std	Y+1, r24	; 0x01
    15e6:	0e 5f       	subi	r16, 0xFE	; 254
    15e8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ea:	88 24       	eor	r8, r8
    15ec:	83 94       	inc	r8
    15ee:	91 2c       	mov	r9, r1
    15f0:	53 01       	movw	r10, r6
    15f2:	13 c0       	rjmp	.+38     	; 0x161a <vfprintf+0x154>
    15f4:	28 01       	movw	r4, r16
    15f6:	f2 e0       	ldi	r31, 0x02	; 2
    15f8:	4f 0e       	add	r4, r31
    15fa:	51 1c       	adc	r5, r1
    15fc:	f8 01       	movw	r30, r16
    15fe:	a0 80       	ld	r10, Z
    1600:	b1 80       	ldd	r11, Z+1	; 0x01
    1602:	36 fe       	sbrs	r3, 6
    1604:	03 c0       	rjmp	.+6      	; 0x160c <vfprintf+0x146>
    1606:	69 2d       	mov	r22, r9
    1608:	70 e0       	ldi	r23, 0x00	; 0
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <vfprintf+0x14a>
    160c:	6f ef       	ldi	r22, 0xFF	; 255
    160e:	7f ef       	ldi	r23, 0xFF	; 255
    1610:	c5 01       	movw	r24, r10
    1612:	0e 94 4f 0c 	call	0x189e	; 0x189e <strnlen>
    1616:	4c 01       	movw	r8, r24
    1618:	82 01       	movw	r16, r4
    161a:	f3 2d       	mov	r31, r3
    161c:	ff 77       	andi	r31, 0x7F	; 127
    161e:	3f 2e       	mov	r3, r31
    1620:	16 c0       	rjmp	.+44     	; 0x164e <vfprintf+0x188>
    1622:	28 01       	movw	r4, r16
    1624:	22 e0       	ldi	r18, 0x02	; 2
    1626:	42 0e       	add	r4, r18
    1628:	51 1c       	adc	r5, r1
    162a:	f8 01       	movw	r30, r16
    162c:	a0 80       	ld	r10, Z
    162e:	b1 80       	ldd	r11, Z+1	; 0x01
    1630:	36 fe       	sbrs	r3, 6
    1632:	03 c0       	rjmp	.+6      	; 0x163a <vfprintf+0x174>
    1634:	69 2d       	mov	r22, r9
    1636:	70 e0       	ldi	r23, 0x00	; 0
    1638:	02 c0       	rjmp	.+4      	; 0x163e <vfprintf+0x178>
    163a:	6f ef       	ldi	r22, 0xFF	; 255
    163c:	7f ef       	ldi	r23, 0xFF	; 255
    163e:	c5 01       	movw	r24, r10
    1640:	0e 94 44 0c 	call	0x1888	; 0x1888 <strnlen_P>
    1644:	4c 01       	movw	r8, r24
    1646:	f3 2d       	mov	r31, r3
    1648:	f0 68       	ori	r31, 0x80	; 128
    164a:	3f 2e       	mov	r3, r31
    164c:	82 01       	movw	r16, r4
    164e:	33 fc       	sbrc	r3, 3
    1650:	1b c0       	rjmp	.+54     	; 0x1688 <vfprintf+0x1c2>
    1652:	82 2d       	mov	r24, r2
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	88 16       	cp	r8, r24
    1658:	99 06       	cpc	r9, r25
    165a:	b0 f4       	brcc	.+44     	; 0x1688 <vfprintf+0x1c2>
    165c:	b6 01       	movw	r22, r12
    165e:	80 e2       	ldi	r24, 0x20	; 32
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <fputc>
    1666:	2a 94       	dec	r2
    1668:	f4 cf       	rjmp	.-24     	; 0x1652 <vfprintf+0x18c>
    166a:	f5 01       	movw	r30, r10
    166c:	37 fc       	sbrc	r3, 7
    166e:	85 91       	lpm	r24, Z+
    1670:	37 fe       	sbrs	r3, 7
    1672:	81 91       	ld	r24, Z+
    1674:	5f 01       	movw	r10, r30
    1676:	b6 01       	movw	r22, r12
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <fputc>
    167e:	21 10       	cpse	r2, r1
    1680:	2a 94       	dec	r2
    1682:	21 e0       	ldi	r18, 0x01	; 1
    1684:	82 1a       	sub	r8, r18
    1686:	91 08       	sbc	r9, r1
    1688:	81 14       	cp	r8, r1
    168a:	91 04       	cpc	r9, r1
    168c:	71 f7       	brne	.-36     	; 0x166a <vfprintf+0x1a4>
    168e:	e8 c0       	rjmp	.+464    	; 0x1860 <vfprintf+0x39a>
    1690:	84 36       	cpi	r24, 0x64	; 100
    1692:	11 f0       	breq	.+4      	; 0x1698 <vfprintf+0x1d2>
    1694:	89 36       	cpi	r24, 0x69	; 105
    1696:	41 f5       	brne	.+80     	; 0x16e8 <vfprintf+0x222>
    1698:	f8 01       	movw	r30, r16
    169a:	37 fe       	sbrs	r3, 7
    169c:	07 c0       	rjmp	.+14     	; 0x16ac <vfprintf+0x1e6>
    169e:	60 81       	ld	r22, Z
    16a0:	71 81       	ldd	r23, Z+1	; 0x01
    16a2:	82 81       	ldd	r24, Z+2	; 0x02
    16a4:	93 81       	ldd	r25, Z+3	; 0x03
    16a6:	0c 5f       	subi	r16, 0xFC	; 252
    16a8:	1f 4f       	sbci	r17, 0xFF	; 255
    16aa:	08 c0       	rjmp	.+16     	; 0x16bc <vfprintf+0x1f6>
    16ac:	60 81       	ld	r22, Z
    16ae:	71 81       	ldd	r23, Z+1	; 0x01
    16b0:	07 2e       	mov	r0, r23
    16b2:	00 0c       	add	r0, r0
    16b4:	88 0b       	sbc	r24, r24
    16b6:	99 0b       	sbc	r25, r25
    16b8:	0e 5f       	subi	r16, 0xFE	; 254
    16ba:	1f 4f       	sbci	r17, 0xFF	; 255
    16bc:	f3 2d       	mov	r31, r3
    16be:	ff 76       	andi	r31, 0x6F	; 111
    16c0:	3f 2e       	mov	r3, r31
    16c2:	97 ff       	sbrs	r25, 7
    16c4:	09 c0       	rjmp	.+18     	; 0x16d8 <vfprintf+0x212>
    16c6:	90 95       	com	r25
    16c8:	80 95       	com	r24
    16ca:	70 95       	com	r23
    16cc:	61 95       	neg	r22
    16ce:	7f 4f       	sbci	r23, 0xFF	; 255
    16d0:	8f 4f       	sbci	r24, 0xFF	; 255
    16d2:	9f 4f       	sbci	r25, 0xFF	; 255
    16d4:	f0 68       	ori	r31, 0x80	; 128
    16d6:	3f 2e       	mov	r3, r31
    16d8:	2a e0       	ldi	r18, 0x0A	; 10
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	a3 01       	movw	r20, r6
    16de:	0e 94 96 0c 	call	0x192c	; 0x192c <__ultoa_invert>
    16e2:	88 2e       	mov	r8, r24
    16e4:	86 18       	sub	r8, r6
    16e6:	45 c0       	rjmp	.+138    	; 0x1772 <vfprintf+0x2ac>
    16e8:	85 37       	cpi	r24, 0x75	; 117
    16ea:	31 f4       	brne	.+12     	; 0x16f8 <vfprintf+0x232>
    16ec:	23 2d       	mov	r18, r3
    16ee:	2f 7e       	andi	r18, 0xEF	; 239
    16f0:	b2 2e       	mov	r11, r18
    16f2:	2a e0       	ldi	r18, 0x0A	; 10
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	25 c0       	rjmp	.+74     	; 0x1742 <vfprintf+0x27c>
    16f8:	93 2d       	mov	r25, r3
    16fa:	99 7f       	andi	r25, 0xF9	; 249
    16fc:	b9 2e       	mov	r11, r25
    16fe:	8f 36       	cpi	r24, 0x6F	; 111
    1700:	c1 f0       	breq	.+48     	; 0x1732 <vfprintf+0x26c>
    1702:	18 f4       	brcc	.+6      	; 0x170a <vfprintf+0x244>
    1704:	88 35       	cpi	r24, 0x58	; 88
    1706:	79 f0       	breq	.+30     	; 0x1726 <vfprintf+0x260>
    1708:	b5 c0       	rjmp	.+362    	; 0x1874 <vfprintf+0x3ae>
    170a:	80 37       	cpi	r24, 0x70	; 112
    170c:	19 f0       	breq	.+6      	; 0x1714 <vfprintf+0x24e>
    170e:	88 37       	cpi	r24, 0x78	; 120
    1710:	21 f0       	breq	.+8      	; 0x171a <vfprintf+0x254>
    1712:	b0 c0       	rjmp	.+352    	; 0x1874 <vfprintf+0x3ae>
    1714:	e9 2f       	mov	r30, r25
    1716:	e0 61       	ori	r30, 0x10	; 16
    1718:	be 2e       	mov	r11, r30
    171a:	b4 fe       	sbrs	r11, 4
    171c:	0d c0       	rjmp	.+26     	; 0x1738 <vfprintf+0x272>
    171e:	fb 2d       	mov	r31, r11
    1720:	f4 60       	ori	r31, 0x04	; 4
    1722:	bf 2e       	mov	r11, r31
    1724:	09 c0       	rjmp	.+18     	; 0x1738 <vfprintf+0x272>
    1726:	34 fe       	sbrs	r3, 4
    1728:	0a c0       	rjmp	.+20     	; 0x173e <vfprintf+0x278>
    172a:	29 2f       	mov	r18, r25
    172c:	26 60       	ori	r18, 0x06	; 6
    172e:	b2 2e       	mov	r11, r18
    1730:	06 c0       	rjmp	.+12     	; 0x173e <vfprintf+0x278>
    1732:	28 e0       	ldi	r18, 0x08	; 8
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	05 c0       	rjmp	.+10     	; 0x1742 <vfprintf+0x27c>
    1738:	20 e1       	ldi	r18, 0x10	; 16
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <vfprintf+0x27c>
    173e:	20 e1       	ldi	r18, 0x10	; 16
    1740:	32 e0       	ldi	r19, 0x02	; 2
    1742:	f8 01       	movw	r30, r16
    1744:	b7 fe       	sbrs	r11, 7
    1746:	07 c0       	rjmp	.+14     	; 0x1756 <vfprintf+0x290>
    1748:	60 81       	ld	r22, Z
    174a:	71 81       	ldd	r23, Z+1	; 0x01
    174c:	82 81       	ldd	r24, Z+2	; 0x02
    174e:	93 81       	ldd	r25, Z+3	; 0x03
    1750:	0c 5f       	subi	r16, 0xFC	; 252
    1752:	1f 4f       	sbci	r17, 0xFF	; 255
    1754:	06 c0       	rjmp	.+12     	; 0x1762 <vfprintf+0x29c>
    1756:	60 81       	ld	r22, Z
    1758:	71 81       	ldd	r23, Z+1	; 0x01
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	0e 5f       	subi	r16, 0xFE	; 254
    1760:	1f 4f       	sbci	r17, 0xFF	; 255
    1762:	a3 01       	movw	r20, r6
    1764:	0e 94 96 0c 	call	0x192c	; 0x192c <__ultoa_invert>
    1768:	88 2e       	mov	r8, r24
    176a:	86 18       	sub	r8, r6
    176c:	fb 2d       	mov	r31, r11
    176e:	ff 77       	andi	r31, 0x7F	; 127
    1770:	3f 2e       	mov	r3, r31
    1772:	36 fe       	sbrs	r3, 6
    1774:	0d c0       	rjmp	.+26     	; 0x1790 <vfprintf+0x2ca>
    1776:	23 2d       	mov	r18, r3
    1778:	2e 7f       	andi	r18, 0xFE	; 254
    177a:	a2 2e       	mov	r10, r18
    177c:	89 14       	cp	r8, r9
    177e:	58 f4       	brcc	.+22     	; 0x1796 <vfprintf+0x2d0>
    1780:	34 fe       	sbrs	r3, 4
    1782:	0b c0       	rjmp	.+22     	; 0x179a <vfprintf+0x2d4>
    1784:	32 fc       	sbrc	r3, 2
    1786:	09 c0       	rjmp	.+18     	; 0x179a <vfprintf+0x2d4>
    1788:	83 2d       	mov	r24, r3
    178a:	8e 7e       	andi	r24, 0xEE	; 238
    178c:	a8 2e       	mov	r10, r24
    178e:	05 c0       	rjmp	.+10     	; 0x179a <vfprintf+0x2d4>
    1790:	b8 2c       	mov	r11, r8
    1792:	a3 2c       	mov	r10, r3
    1794:	03 c0       	rjmp	.+6      	; 0x179c <vfprintf+0x2d6>
    1796:	b8 2c       	mov	r11, r8
    1798:	01 c0       	rjmp	.+2      	; 0x179c <vfprintf+0x2d6>
    179a:	b9 2c       	mov	r11, r9
    179c:	a4 fe       	sbrs	r10, 4
    179e:	0f c0       	rjmp	.+30     	; 0x17be <vfprintf+0x2f8>
    17a0:	fe 01       	movw	r30, r28
    17a2:	e8 0d       	add	r30, r8
    17a4:	f1 1d       	adc	r31, r1
    17a6:	80 81       	ld	r24, Z
    17a8:	80 33       	cpi	r24, 0x30	; 48
    17aa:	21 f4       	brne	.+8      	; 0x17b4 <vfprintf+0x2ee>
    17ac:	9a 2d       	mov	r25, r10
    17ae:	99 7e       	andi	r25, 0xE9	; 233
    17b0:	a9 2e       	mov	r10, r25
    17b2:	09 c0       	rjmp	.+18     	; 0x17c6 <vfprintf+0x300>
    17b4:	a2 fe       	sbrs	r10, 2
    17b6:	06 c0       	rjmp	.+12     	; 0x17c4 <vfprintf+0x2fe>
    17b8:	b3 94       	inc	r11
    17ba:	b3 94       	inc	r11
    17bc:	04 c0       	rjmp	.+8      	; 0x17c6 <vfprintf+0x300>
    17be:	8a 2d       	mov	r24, r10
    17c0:	86 78       	andi	r24, 0x86	; 134
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <vfprintf+0x300>
    17c4:	b3 94       	inc	r11
    17c6:	a3 fc       	sbrc	r10, 3
    17c8:	11 c0       	rjmp	.+34     	; 0x17ec <vfprintf+0x326>
    17ca:	a0 fe       	sbrs	r10, 0
    17cc:	06 c0       	rjmp	.+12     	; 0x17da <vfprintf+0x314>
    17ce:	b2 14       	cp	r11, r2
    17d0:	88 f4       	brcc	.+34     	; 0x17f4 <vfprintf+0x32e>
    17d2:	28 0c       	add	r2, r8
    17d4:	92 2c       	mov	r9, r2
    17d6:	9b 18       	sub	r9, r11
    17d8:	0e c0       	rjmp	.+28     	; 0x17f6 <vfprintf+0x330>
    17da:	b2 14       	cp	r11, r2
    17dc:	60 f4       	brcc	.+24     	; 0x17f6 <vfprintf+0x330>
    17de:	b6 01       	movw	r22, r12
    17e0:	80 e2       	ldi	r24, 0x20	; 32
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <fputc>
    17e8:	b3 94       	inc	r11
    17ea:	f7 cf       	rjmp	.-18     	; 0x17da <vfprintf+0x314>
    17ec:	b2 14       	cp	r11, r2
    17ee:	18 f4       	brcc	.+6      	; 0x17f6 <vfprintf+0x330>
    17f0:	2b 18       	sub	r2, r11
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <vfprintf+0x332>
    17f4:	98 2c       	mov	r9, r8
    17f6:	21 2c       	mov	r2, r1
    17f8:	a4 fe       	sbrs	r10, 4
    17fa:	10 c0       	rjmp	.+32     	; 0x181c <vfprintf+0x356>
    17fc:	b6 01       	movw	r22, r12
    17fe:	80 e3       	ldi	r24, 0x30	; 48
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <fputc>
    1806:	a2 fe       	sbrs	r10, 2
    1808:	17 c0       	rjmp	.+46     	; 0x1838 <vfprintf+0x372>
    180a:	a1 fc       	sbrc	r10, 1
    180c:	03 c0       	rjmp	.+6      	; 0x1814 <vfprintf+0x34e>
    180e:	88 e7       	ldi	r24, 0x78	; 120
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <vfprintf+0x352>
    1814:	88 e5       	ldi	r24, 0x58	; 88
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	b6 01       	movw	r22, r12
    181a:	0c c0       	rjmp	.+24     	; 0x1834 <vfprintf+0x36e>
    181c:	8a 2d       	mov	r24, r10
    181e:	86 78       	andi	r24, 0x86	; 134
    1820:	59 f0       	breq	.+22     	; 0x1838 <vfprintf+0x372>
    1822:	a1 fe       	sbrs	r10, 1
    1824:	02 c0       	rjmp	.+4      	; 0x182a <vfprintf+0x364>
    1826:	8b e2       	ldi	r24, 0x2B	; 43
    1828:	01 c0       	rjmp	.+2      	; 0x182c <vfprintf+0x366>
    182a:	80 e2       	ldi	r24, 0x20	; 32
    182c:	a7 fc       	sbrc	r10, 7
    182e:	8d e2       	ldi	r24, 0x2D	; 45
    1830:	b6 01       	movw	r22, r12
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <fputc>
    1838:	89 14       	cp	r8, r9
    183a:	38 f4       	brcc	.+14     	; 0x184a <vfprintf+0x384>
    183c:	b6 01       	movw	r22, r12
    183e:	80 e3       	ldi	r24, 0x30	; 48
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <fputc>
    1846:	9a 94       	dec	r9
    1848:	f7 cf       	rjmp	.-18     	; 0x1838 <vfprintf+0x372>
    184a:	8a 94       	dec	r8
    184c:	f3 01       	movw	r30, r6
    184e:	e8 0d       	add	r30, r8
    1850:	f1 1d       	adc	r31, r1
    1852:	80 81       	ld	r24, Z
    1854:	b6 01       	movw	r22, r12
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <fputc>
    185c:	81 10       	cpse	r8, r1
    185e:	f5 cf       	rjmp	.-22     	; 0x184a <vfprintf+0x384>
    1860:	22 20       	and	r2, r2
    1862:	09 f4       	brne	.+2      	; 0x1866 <vfprintf+0x3a0>
    1864:	42 ce       	rjmp	.-892    	; 0x14ea <vfprintf+0x24>
    1866:	b6 01       	movw	r22, r12
    1868:	80 e2       	ldi	r24, 0x20	; 32
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <fputc>
    1870:	2a 94       	dec	r2
    1872:	f6 cf       	rjmp	.-20     	; 0x1860 <vfprintf+0x39a>
    1874:	f6 01       	movw	r30, r12
    1876:	86 81       	ldd	r24, Z+6	; 0x06
    1878:	97 81       	ldd	r25, Z+7	; 0x07
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <vfprintf+0x3ba>
    187c:	8f ef       	ldi	r24, 0xFF	; 255
    187e:	9f ef       	ldi	r25, 0xFF	; 255
    1880:	2b 96       	adiw	r28, 0x0b	; 11
    1882:	e2 e1       	ldi	r30, 0x12	; 18
    1884:	0c 94 10 0d 	jmp	0x1a20	; 0x1a20 <__epilogue_restores__>

00001888 <strnlen_P>:
    1888:	fc 01       	movw	r30, r24
    188a:	05 90       	lpm	r0, Z+
    188c:	61 50       	subi	r22, 0x01	; 1
    188e:	70 40       	sbci	r23, 0x00	; 0
    1890:	01 10       	cpse	r0, r1
    1892:	d8 f7       	brcc	.-10     	; 0x188a <strnlen_P+0x2>
    1894:	80 95       	com	r24
    1896:	90 95       	com	r25
    1898:	8e 0f       	add	r24, r30
    189a:	9f 1f       	adc	r25, r31
    189c:	08 95       	ret

0000189e <strnlen>:
    189e:	fc 01       	movw	r30, r24
    18a0:	61 50       	subi	r22, 0x01	; 1
    18a2:	70 40       	sbci	r23, 0x00	; 0
    18a4:	01 90       	ld	r0, Z+
    18a6:	01 10       	cpse	r0, r1
    18a8:	d8 f7       	brcc	.-10     	; 0x18a0 <strnlen+0x2>
    18aa:	80 95       	com	r24
    18ac:	90 95       	com	r25
    18ae:	8e 0f       	add	r24, r30
    18b0:	9f 1f       	adc	r25, r31
    18b2:	08 95       	ret

000018b4 <fputc>:
    18b4:	0f 93       	push	r16
    18b6:	1f 93       	push	r17
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	fb 01       	movw	r30, r22
    18be:	23 81       	ldd	r18, Z+3	; 0x03
    18c0:	21 fd       	sbrc	r18, 1
    18c2:	03 c0       	rjmp	.+6      	; 0x18ca <fputc+0x16>
    18c4:	8f ef       	ldi	r24, 0xFF	; 255
    18c6:	9f ef       	ldi	r25, 0xFF	; 255
    18c8:	2c c0       	rjmp	.+88     	; 0x1922 <fputc+0x6e>
    18ca:	22 ff       	sbrs	r18, 2
    18cc:	16 c0       	rjmp	.+44     	; 0x18fa <fputc+0x46>
    18ce:	46 81       	ldd	r20, Z+6	; 0x06
    18d0:	57 81       	ldd	r21, Z+7	; 0x07
    18d2:	24 81       	ldd	r18, Z+4	; 0x04
    18d4:	35 81       	ldd	r19, Z+5	; 0x05
    18d6:	42 17       	cp	r20, r18
    18d8:	53 07       	cpc	r21, r19
    18da:	44 f4       	brge	.+16     	; 0x18ec <fputc+0x38>
    18dc:	a0 81       	ld	r26, Z
    18de:	b1 81       	ldd	r27, Z+1	; 0x01
    18e0:	9d 01       	movw	r18, r26
    18e2:	2f 5f       	subi	r18, 0xFF	; 255
    18e4:	3f 4f       	sbci	r19, 0xFF	; 255
    18e6:	31 83       	std	Z+1, r19	; 0x01
    18e8:	20 83       	st	Z, r18
    18ea:	8c 93       	st	X, r24
    18ec:	26 81       	ldd	r18, Z+6	; 0x06
    18ee:	37 81       	ldd	r19, Z+7	; 0x07
    18f0:	2f 5f       	subi	r18, 0xFF	; 255
    18f2:	3f 4f       	sbci	r19, 0xFF	; 255
    18f4:	37 83       	std	Z+7, r19	; 0x07
    18f6:	26 83       	std	Z+6, r18	; 0x06
    18f8:	14 c0       	rjmp	.+40     	; 0x1922 <fputc+0x6e>
    18fa:	8b 01       	movw	r16, r22
    18fc:	ec 01       	movw	r28, r24
    18fe:	fb 01       	movw	r30, r22
    1900:	00 84       	ldd	r0, Z+8	; 0x08
    1902:	f1 85       	ldd	r31, Z+9	; 0x09
    1904:	e0 2d       	mov	r30, r0
    1906:	09 95       	icall
    1908:	89 2b       	or	r24, r25
    190a:	e1 f6       	brne	.-72     	; 0x18c4 <fputc+0x10>
    190c:	d8 01       	movw	r26, r16
    190e:	16 96       	adiw	r26, 0x06	; 6
    1910:	8d 91       	ld	r24, X+
    1912:	9c 91       	ld	r25, X
    1914:	17 97       	sbiw	r26, 0x07	; 7
    1916:	01 96       	adiw	r24, 0x01	; 1
    1918:	17 96       	adiw	r26, 0x07	; 7
    191a:	9c 93       	st	X, r25
    191c:	8e 93       	st	-X, r24
    191e:	16 97       	sbiw	r26, 0x06	; 6
    1920:	ce 01       	movw	r24, r28
    1922:	df 91       	pop	r29
    1924:	cf 91       	pop	r28
    1926:	1f 91       	pop	r17
    1928:	0f 91       	pop	r16
    192a:	08 95       	ret

0000192c <__ultoa_invert>:
    192c:	fa 01       	movw	r30, r20
    192e:	aa 27       	eor	r26, r26
    1930:	28 30       	cpi	r18, 0x08	; 8
    1932:	51 f1       	breq	.+84     	; 0x1988 <__ultoa_invert+0x5c>
    1934:	20 31       	cpi	r18, 0x10	; 16
    1936:	81 f1       	breq	.+96     	; 0x1998 <__ultoa_invert+0x6c>
    1938:	e8 94       	clt
    193a:	6f 93       	push	r22
    193c:	6e 7f       	andi	r22, 0xFE	; 254
    193e:	6e 5f       	subi	r22, 0xFE	; 254
    1940:	7f 4f       	sbci	r23, 0xFF	; 255
    1942:	8f 4f       	sbci	r24, 0xFF	; 255
    1944:	9f 4f       	sbci	r25, 0xFF	; 255
    1946:	af 4f       	sbci	r26, 0xFF	; 255
    1948:	b1 e0       	ldi	r27, 0x01	; 1
    194a:	3e d0       	rcall	.+124    	; 0x19c8 <__ultoa_invert+0x9c>
    194c:	b4 e0       	ldi	r27, 0x04	; 4
    194e:	3c d0       	rcall	.+120    	; 0x19c8 <__ultoa_invert+0x9c>
    1950:	67 0f       	add	r22, r23
    1952:	78 1f       	adc	r23, r24
    1954:	89 1f       	adc	r24, r25
    1956:	9a 1f       	adc	r25, r26
    1958:	a1 1d       	adc	r26, r1
    195a:	68 0f       	add	r22, r24
    195c:	79 1f       	adc	r23, r25
    195e:	8a 1f       	adc	r24, r26
    1960:	91 1d       	adc	r25, r1
    1962:	a1 1d       	adc	r26, r1
    1964:	6a 0f       	add	r22, r26
    1966:	71 1d       	adc	r23, r1
    1968:	81 1d       	adc	r24, r1
    196a:	91 1d       	adc	r25, r1
    196c:	a1 1d       	adc	r26, r1
    196e:	20 d0       	rcall	.+64     	; 0x19b0 <__ultoa_invert+0x84>
    1970:	09 f4       	brne	.+2      	; 0x1974 <__ultoa_invert+0x48>
    1972:	68 94       	set
    1974:	3f 91       	pop	r19
    1976:	2a e0       	ldi	r18, 0x0A	; 10
    1978:	26 9f       	mul	r18, r22
    197a:	11 24       	eor	r1, r1
    197c:	30 19       	sub	r19, r0
    197e:	30 5d       	subi	r19, 0xD0	; 208
    1980:	31 93       	st	Z+, r19
    1982:	de f6       	brtc	.-74     	; 0x193a <__ultoa_invert+0xe>
    1984:	cf 01       	movw	r24, r30
    1986:	08 95       	ret
    1988:	46 2f       	mov	r20, r22
    198a:	47 70       	andi	r20, 0x07	; 7
    198c:	40 5d       	subi	r20, 0xD0	; 208
    198e:	41 93       	st	Z+, r20
    1990:	b3 e0       	ldi	r27, 0x03	; 3
    1992:	0f d0       	rcall	.+30     	; 0x19b2 <__ultoa_invert+0x86>
    1994:	c9 f7       	brne	.-14     	; 0x1988 <__ultoa_invert+0x5c>
    1996:	f6 cf       	rjmp	.-20     	; 0x1984 <__ultoa_invert+0x58>
    1998:	46 2f       	mov	r20, r22
    199a:	4f 70       	andi	r20, 0x0F	; 15
    199c:	40 5d       	subi	r20, 0xD0	; 208
    199e:	4a 33       	cpi	r20, 0x3A	; 58
    19a0:	18 f0       	brcs	.+6      	; 0x19a8 <__ultoa_invert+0x7c>
    19a2:	49 5d       	subi	r20, 0xD9	; 217
    19a4:	31 fd       	sbrc	r19, 1
    19a6:	40 52       	subi	r20, 0x20	; 32
    19a8:	41 93       	st	Z+, r20
    19aa:	02 d0       	rcall	.+4      	; 0x19b0 <__ultoa_invert+0x84>
    19ac:	a9 f7       	brne	.-22     	; 0x1998 <__ultoa_invert+0x6c>
    19ae:	ea cf       	rjmp	.-44     	; 0x1984 <__ultoa_invert+0x58>
    19b0:	b4 e0       	ldi	r27, 0x04	; 4
    19b2:	a6 95       	lsr	r26
    19b4:	97 95       	ror	r25
    19b6:	87 95       	ror	r24
    19b8:	77 95       	ror	r23
    19ba:	67 95       	ror	r22
    19bc:	ba 95       	dec	r27
    19be:	c9 f7       	brne	.-14     	; 0x19b2 <__ultoa_invert+0x86>
    19c0:	00 97       	sbiw	r24, 0x00	; 0
    19c2:	61 05       	cpc	r22, r1
    19c4:	71 05       	cpc	r23, r1
    19c6:	08 95       	ret
    19c8:	9b 01       	movw	r18, r22
    19ca:	ac 01       	movw	r20, r24
    19cc:	0a 2e       	mov	r0, r26
    19ce:	06 94       	lsr	r0
    19d0:	57 95       	ror	r21
    19d2:	47 95       	ror	r20
    19d4:	37 95       	ror	r19
    19d6:	27 95       	ror	r18
    19d8:	ba 95       	dec	r27
    19da:	c9 f7       	brne	.-14     	; 0x19ce <__ultoa_invert+0xa2>
    19dc:	62 0f       	add	r22, r18
    19de:	73 1f       	adc	r23, r19
    19e0:	84 1f       	adc	r24, r20
    19e2:	95 1f       	adc	r25, r21
    19e4:	a0 1d       	adc	r26, r0
    19e6:	08 95       	ret

000019e8 <__prologue_saves__>:
    19e8:	2f 92       	push	r2
    19ea:	3f 92       	push	r3
    19ec:	4f 92       	push	r4
    19ee:	5f 92       	push	r5
    19f0:	6f 92       	push	r6
    19f2:	7f 92       	push	r7
    19f4:	8f 92       	push	r8
    19f6:	9f 92       	push	r9
    19f8:	af 92       	push	r10
    19fa:	bf 92       	push	r11
    19fc:	cf 92       	push	r12
    19fe:	df 92       	push	r13
    1a00:	ef 92       	push	r14
    1a02:	ff 92       	push	r15
    1a04:	0f 93       	push	r16
    1a06:	1f 93       	push	r17
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	ca 1b       	sub	r28, r26
    1a12:	db 0b       	sbc	r29, r27
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	f8 94       	cli
    1a18:	de bf       	out	0x3e, r29	; 62
    1a1a:	0f be       	out	0x3f, r0	; 63
    1a1c:	cd bf       	out	0x3d, r28	; 61
    1a1e:	09 94       	ijmp

00001a20 <__epilogue_restores__>:
    1a20:	2a 88       	ldd	r2, Y+18	; 0x12
    1a22:	39 88       	ldd	r3, Y+17	; 0x11
    1a24:	48 88       	ldd	r4, Y+16	; 0x10
    1a26:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a28:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a2a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a2c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a2e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a30:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a32:	b9 84       	ldd	r11, Y+9	; 0x09
    1a34:	c8 84       	ldd	r12, Y+8	; 0x08
    1a36:	df 80       	ldd	r13, Y+7	; 0x07
    1a38:	ee 80       	ldd	r14, Y+6	; 0x06
    1a3a:	fd 80       	ldd	r15, Y+5	; 0x05
    1a3c:	0c 81       	ldd	r16, Y+4	; 0x04
    1a3e:	1b 81       	ldd	r17, Y+3	; 0x03
    1a40:	aa 81       	ldd	r26, Y+2	; 0x02
    1a42:	b9 81       	ldd	r27, Y+1	; 0x01
    1a44:	ce 0f       	add	r28, r30
    1a46:	d1 1d       	adc	r29, r1
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	de bf       	out	0x3e, r29	; 62
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	cd bf       	out	0x3d, r28	; 61
    1a52:	ed 01       	movw	r28, r26
    1a54:	08 95       	ret

00001a56 <_exit>:
    1a56:	f8 94       	cli

00001a58 <__stop_program>:
    1a58:	ff cf       	rjmp	.-2      	; 0x1a58 <__stop_program>
