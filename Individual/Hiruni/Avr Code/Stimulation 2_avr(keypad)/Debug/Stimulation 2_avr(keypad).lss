
Stimulation 2_avr(keypad).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000192  00000226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000192  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800110  00800110  00000236  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000790  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b7  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000035b  00000000  00000000  00001117  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001474  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c9  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000067  00000000  00000000  00001871  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000018d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e9       	ldi	r30, 0x92	; 146
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b7 00 	call	0x16e	; 0x16e <main>
  9e:	0c 94 c7 00 	jmp	0x18e	; 0x18e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <keyfind>:

char keyfind()
{
	while(1)
	{
		KEY_DDR = 0xF0;          // 0b11110000 set port direction as input-output
  a6:	80 ef       	ldi	r24, 0xF0	; 240
  a8:	84 b9       	out	0x04, r24	; 4
		KEY_PRT = 0xFF;          // 0b11111111
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	85 b9       	out	0x05, r24	; 5
		
		do
		{
			KEY_PRT &= 0x0F;
  ae:	85 b1       	in	r24, 0x05	; 5
  b0:	8f 70       	andi	r24, 0x0F	; 15
  b2:	85 b9       	out	0x05, r24	; 5

			rowloc = (KEY_PIN & 0x0F); /* read status of row */
  b4:	83 b1       	in	r24, 0x03	; 3
  b6:	8f 70       	andi	r24, 0x0F	; 15
  b8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <rowloc>
		}while(rowloc != 0x0F);
  bc:	8f 30       	cpi	r24, 0x0F	; 15
  be:	b9 f7       	brne	.-18     	; 0xae <keyfind+0x8>
		do
		{
			do
			{
				
				rowloc = (KEY_PIN & 0x0F); /* read status of row */
  c0:	83 b1       	in	r24, 0x03	; 3
  c2:	8f 70       	andi	r24, 0x0F	; 15
  c4:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <rowloc>
				}while(colloc == 0x0F);        /* check for any key press */
  c8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
  cc:	8f 30       	cpi	r24, 0x0F	; 15
  ce:	c1 f3       	breq	.-16     	; 0xc0 <keyfind+0x1a>
				
				rowloc = (KEY_PIN & 0x0F);
  d0:	83 b1       	in	r24, 0x03	; 3
  d2:	8f 70       	andi	r24, 0x0F	; 15
  d4:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <rowloc>
			}while(rowloc == 0x0F);
  d8:	8f 30       	cpi	r24, 0x0F	; 15
  da:	91 f3       	breq	.-28     	; 0xc0 <keyfind+0x1a>

			/* now check for rows */
			KEY_PRT = 0xEF;            /* check for pressed key in 1st column */
  dc:	8f ee       	ldi	r24, 0xEF	; 239
  de:	85 b9       	out	0x05, r24	; 5
			rowloc = (KEY_PIN & 0x0F);
  e0:	83 b1       	in	r24, 0x03	; 3
  e2:	8f 70       	andi	r24, 0x0F	; 15
  e4:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <rowloc>
			if(rowloc != 0x0F)
  e8:	8f 30       	cpi	r24, 0x0F	; 15
  ea:	19 f0       	breq	.+6      	; 0xf2 <keyfind+0x4c>
			{
				colloc = 0;
  ec:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
				break;
  f0:	17 c0       	rjmp	.+46     	; 0x120 <keyfind+0x7a>
			}

			KEY_PRT = 0xDF;		/* check for pressed key in 2nd column */
  f2:	8f ed       	ldi	r24, 0xDF	; 223
  f4:	85 b9       	out	0x05, r24	; 5
			rowloc = (KEY_PIN & 0x0F);
  f6:	83 b1       	in	r24, 0x03	; 3
  f8:	8f 70       	andi	r24, 0x0F	; 15
  fa:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <rowloc>
			if(rowloc != 0x0F)
  fe:	8f 30       	cpi	r24, 0x0F	; 15
 100:	21 f0       	breq	.+8      	; 0x10a <keyfind+0x64>
			{
				colloc = 1;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
				break;
 108:	0b c0       	rjmp	.+22     	; 0x120 <keyfind+0x7a>
			}
			
			KEY_PRT = 0xBF;		/* check for pressed key in 3rd column */
 10a:	8f eb       	ldi	r24, 0xBF	; 191
 10c:	85 b9       	out	0x05, r24	; 5
			rowloc = (KEY_PIN & 0x0F);
 10e:	83 b1       	in	r24, 0x03	; 3
 110:	8f 70       	andi	r24, 0x0F	; 15
 112:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <rowloc>
			if(rowloc != 0x0F)
 116:	8f 30       	cpi	r24, 0x0F	; 15
 118:	31 f2       	breq	.-116    	; 0xa6 <keyfind>
			{
				colloc = 2;
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
				break;
			}

		}
		if(rowloc == 0x0E)
 120:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <rowloc>
 124:	8e 30       	cpi	r24, 0x0E	; 14
 126:	39 f4       	brne	.+14     	; 0x136 <keyfind+0x90>
		return(keypad[0][colloc]);
 128:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	e0 50       	subi	r30, 0x00	; 0
 130:	ff 4f       	sbci	r31, 0xFF	; 255
 132:	80 81       	ld	r24, Z
 134:	08 95       	ret
		else if(rowloc == 0x0D)
 136:	8d 30       	cpi	r24, 0x0D	; 13
 138:	39 f4       	brne	.+14     	; 0x148 <keyfind+0xa2>
		return(keypad[1][colloc]);
 13a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	e0 50       	subi	r30, 0x00	; 0
 142:	ff 4f       	sbci	r31, 0xFF	; 255
 144:	84 81       	ldd	r24, Z+4	; 0x04
 146:	08 95       	ret
		else if(rowloc == 0x0B)
 148:	8b 30       	cpi	r24, 0x0B	; 11
 14a:	39 f4       	brne	.+14     	; 0x15a <keyfind+0xb4>
		return(keypad[2][colloc]);
 14c:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	e0 50       	subi	r30, 0x00	; 0
 154:	ff 4f       	sbci	r31, 0xFF	; 255
 156:	80 85       	ldd	r24, Z+8	; 0x08
 158:	08 95       	ret
		else if(rowloc == 0x07)
 15a:	87 30       	cpi	r24, 0x07	; 7
 15c:	39 f4       	brne	.+14     	; 0x16c <keyfind+0xc6>
		return(keypad[3][colloc]);
 15e:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	e0 50       	subi	r30, 0x00	; 0
 166:	ff 4f       	sbci	r31, 0xFF	; 255
 168:	84 85       	ldd	r24, Z+12	; 0x0c
 16a:	08 95       	ret
}
 16c:	08 95       	ret

0000016e <main>:
#include <util/delay.h>
#include "keypad.h"

int main(void)
{
	DDRD = 0XFF;
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	8a b9       	out	0x0a, r24	; 10
	char KeyVal= 0;
	while (1)
	{
		KeyVal = keyfind();
 172:	0e 94 53 00 	call	0xa6	; 0xa6 <keyfind>
		PORTD = KeyVal;
 176:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	80 e7       	ldi	r24, 0x70	; 112
 17c:	92 e0       	ldi	r25, 0x02	; 2
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0x10>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0x1a>
 188:	00 00       	nop
		_delay_ms(100);
		PORTD = 0;
 18a:	1b b8       	out	0x0b, r1	; 11
 18c:	f2 cf       	rjmp	.-28     	; 0x172 <main+0x4>

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
